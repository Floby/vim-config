!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ACCESS_DELETE	/usr/include/v8/v8.h	/^  ACCESS_DELETE,$/;"	e	enum:v8::AccessType
ACCESS_GET	/usr/include/v8/v8.h	/^  ACCESS_GET,$/;"	e	enum:v8::AccessType
ACCESS_HAS	/usr/include/v8/v8.h	/^  ACCESS_HAS,$/;"	e	enum:v8::AccessType
ACCESS_KEYS	/usr/include/v8/v8.h	/^  ACCESS_KEYS$/;"	e	enum:v8::AccessType
ACCESS_SET	/usr/include/v8/v8.h	/^  ACCESS_SET,$/;"	e	enum:v8::AccessType
ALL_CAN_READ	/usr/include/v8/v8.h	/^  ALL_CAN_READ          = 1,$/;"	e	enum:v8::AccessControl
ALL_CAN_WRITE	/usr/include/v8/v8.h	/^  ALL_CAN_WRITE         = 1 << 1,$/;"	e	enum:v8::AccessControl
AccessControl	/usr/include/v8/v8.h	/^enum AccessControl {$/;"	g	namespace:v8
AccessType	/usr/include/v8/v8.h	/^enum AccessType {$/;"	g	namespace:v8
AccessorGetter	/usr/include/v8/v8.h	/^typedef Handle<Value> (*AccessorGetter)(Local<String> property,$/;"	t	namespace:v8
AccessorInfo	/usr/include/v8/v8.h	/^  inline AccessorInfo(internal::Object** args)$/;"	f	class:v8::AccessorInfo	access:public	signature:(internal::Object** args)
AccessorInfo	/usr/include/v8/v8.h	/^class V8EXPORT AccessorInfo {$/;"	c	namespace:v8
AccessorSetter	/usr/include/v8/v8.h	/^typedef void (*AccessorSetter)(Local<String> property,$/;"	t	namespace:v8
AddHistogramSampleCallback	/usr/include/v8/v8.h	/^typedef void (*AddHistogramSampleCallback)(void* histogram, int sample);$/;"	t	namespace:v8
AddInstancePropertyAccessor	/usr/include/v8/v8.h	/^  void AddInstancePropertyAccessor(Handle<String> name,$/;"	p	class:v8::FunctionTemplate	access:private	signature:(Handle<String> name, AccessorGetter getter, AccessorSetter setter, Handle<Value> data, AccessControl settings, PropertyAttribute attributes)
AddMessageListener	/usr/include/v8/v8.h	/^  static bool AddMessageListener(MessageCallback that,$/;"	p	class:v8::V8	access:public	signature:(MessageCallback that, Handle<Value> data = Handle<Value>())
AddObjectGroup	/usr/include/v8/v8.h	/^  static void AddObjectGroup(Persistent<Value>* objects, size_t length);$/;"	p	class:v8::V8	access:public	signature:(Persistent<Value>* objects, size_t length)
AdjustAmountOfExternalAllocatedMemory	/usr/include/v8/v8.h	/^  static int AdjustAmountOfExternalAllocatedMemory(int change_in_bytes);$/;"	p	class:v8::V8	access:public	signature:(int change_in_bytes)
AfterCompile	/usr/include/v8/v8-debug.h	/^  AfterCompile  = 5,$/;"	e	enum:v8::DebugEvent
Arguments	/usr/include/v8/v8.h	/^  Arguments();$/;"	p	class:v8::Arguments	access:private	signature:()
Arguments	/usr/include/v8/v8.h	/^  inline Arguments(Local<Value> data,$/;"	p	class:v8::Arguments	access:private	signature:(Local<Value> data, Local<Object> holder, Local<Function> callee, bool is_construct_call, void** values, int length)
Arguments	/usr/include/v8/v8.h	/^class V8EXPORT Arguments {$/;"	c	namespace:v8
Array	/usr/include/v8/v8.h	/^  Array();$/;"	p	class:v8::Array	access:private	signature:()
Array	/usr/include/v8/v8.h	/^class V8EXPORT Array : public Object {$/;"	c	namespace:v8	inherits:Object
AsciiValue	/usr/include/v8/v8.h	/^    AsciiValue(const AsciiValue&);$/;"	p	class:v8::String::AsciiValue	access:private	signature:(const AsciiValue&)
AsciiValue	/usr/include/v8/v8.h	/^    explicit AsciiValue(Handle<v8::Value> obj);$/;"	p	class:v8::String::AsciiValue	access:public	signature:(Handle<v8::Value> obj)
AsciiValue	/usr/include/v8/v8.h	/^  class V8EXPORT AsciiValue {$/;"	c	class:v8::String	access:public
BeforeCompile	/usr/include/v8/v8-debug.h	/^  BeforeCompile = 4,$/;"	e	enum:v8::DebugEvent
Boolean	/usr/include/v8/v8.h	/^class V8EXPORT Boolean : public Primitive {$/;"	c	namespace:v8	inherits:Primitive
BooleanValue	/usr/include/v8/v8.h	/^  bool BooleanValue() const;$/;"	p	class:v8::Value	access:public	signature:() const
Break	/usr/include/v8/v8-debug.h	/^  Break = 1,$/;"	e	enum:v8::DebugEvent
Call	/usr/include/v8/v8-debug.h	/^  static Local<Value> Call(v8::Handle<v8::Function> fun,$/;"	p	class:v8::Debug	access:public	signature:(v8::Handle<v8::Function> fun, Handle<Value> data = Handle<Value>())
Call	/usr/include/v8/v8.h	/^  Local<Value> Call(Handle<Object> recv, int argc, Handle<Value> argv[]);$/;"	p	class:v8::Function	access:public	signature:(Handle<Object> recv, int argc, Handle<Value> argv[])
Callee	/usr/include/v8/v8.h	/^  inline Local<Function> Callee() const;$/;"	p	class:v8::Arguments	access:public	signature:() const
Callee	/usr/include/v8/v8.h	/^Local<Function> Arguments::Callee() const {$/;"	f	class:v8::Arguments	signature:() const
CanContinue	/usr/include/v8/v8.h	/^  bool CanContinue() const;$/;"	p	class:v8::TryCatch	access:public	signature:() const
CanMakeExternal	/usr/include/v8/v8.h	/^  bool CanMakeExternal();$/;"	p	class:v8::String	access:public	signature:()
Cast	/usr/include/v8/v8.h	/^  static inline Array* Cast(Value* obj);$/;"	p	class:v8::Array	access:public	signature:(Value* obj)
Cast	/usr/include/v8/v8.h	/^  static inline Date* Cast(v8::Value* obj);$/;"	p	class:v8::Date	access:public	signature:(v8::Value* obj)
Cast	/usr/include/v8/v8.h	/^  static inline External* Cast(Value* obj);$/;"	p	class:v8::External	access:public	signature:(Value* obj)
Cast	/usr/include/v8/v8.h	/^  static inline Function* Cast(Value* obj);$/;"	p	class:v8::Function	access:public	signature:(Value* obj)
Cast	/usr/include/v8/v8.h	/^  static inline Integer* Cast(v8::Value* obj);$/;"	p	class:v8::Integer	access:public	signature:(v8::Value* obj)
Cast	/usr/include/v8/v8.h	/^  static inline Number* Cast(v8::Value* obj);$/;"	p	class:v8::Number	access:public	signature:(v8::Value* obj)
Cast	/usr/include/v8/v8.h	/^  static inline Object* Cast(Value* obj);$/;"	p	class:v8::Object	access:public	signature:(Value* obj)
Cast	/usr/include/v8/v8.h	/^  static inline String* Cast(v8::Value* obj);$/;"	p	class:v8::String	access:public	signature:(v8::Value* obj)
Cast	/usr/include/v8/v8.h	/^  template <class S> static inline Handle<T> Cast(Handle<S> that) {$/;"	f	class:v8::Handle	access:public	signature:(Handle<S> that)
Cast	/usr/include/v8/v8.h	/^  template <class S> static inline Local<T> Cast(Local<S> that) {$/;"	f	class:v8::Local	access:public	signature:(Local<S> that)
Cast	/usr/include/v8/v8.h	/^  template <class S> static inline Persistent<T> Cast(Persistent<S> that) {$/;"	f	class:v8::Persistent	access:public	signature:(Persistent<S> that)
Cast	/usr/include/v8/v8.h	/^Array* Array::Cast(v8::Value* value) {$/;"	f	class:v8::Array	signature:(v8::Value* value)
Cast	/usr/include/v8/v8.h	/^Date* Date::Cast(v8::Value* value) {$/;"	f	class:v8::Date	signature:(v8::Value* value)
Cast	/usr/include/v8/v8.h	/^External* External::Cast(v8::Value* value) {$/;"	f	class:v8::External	signature:(v8::Value* value)
Cast	/usr/include/v8/v8.h	/^Function* Function::Cast(v8::Value* value) {$/;"	f	class:v8::Function	signature:(v8::Value* value)
Cast	/usr/include/v8/v8.h	/^Integer* Integer::Cast(v8::Value* value) {$/;"	f	class:v8::Integer	signature:(v8::Value* value)
Cast	/usr/include/v8/v8.h	/^Number* Number::Cast(v8::Value* value) {$/;"	f	class:v8::Number	signature:(v8::Value* value)
Cast	/usr/include/v8/v8.h	/^Object* Object::Cast(v8::Value* value) {$/;"	f	class:v8::Object	signature:(v8::Value* value)
Cast	/usr/include/v8/v8.h	/^String* String::Cast(v8::Value* value) {$/;"	f	class:v8::String	signature:(v8::Value* value)
CheckCast	/usr/include/v8/v8.h	/^  static void CheckCast(Value* obj);$/;"	p	class:v8::Array	access:private	signature:(Value* obj)
CheckCast	/usr/include/v8/v8.h	/^  static void CheckCast(Value* obj);$/;"	p	class:v8::Function	access:private	signature:(Value* obj)
CheckCast	/usr/include/v8/v8.h	/^  static void CheckCast(Value* obj);$/;"	p	class:v8::Object	access:private	signature:(Value* obj)
CheckCast	/usr/include/v8/v8.h	/^  static void CheckCast(v8::Value* obj);$/;"	p	class:v8::Date	access:private	signature:(v8::Value* obj)
CheckCast	/usr/include/v8/v8.h	/^  static void CheckCast(v8::Value* obj);$/;"	p	class:v8::External	access:private	signature:(v8::Value* obj)
CheckCast	/usr/include/v8/v8.h	/^  static void CheckCast(v8::Value* obj);$/;"	p	class:v8::Integer	access:private	signature:(v8::Value* obj)
CheckCast	/usr/include/v8/v8.h	/^  static void CheckCast(v8::Value* obj);$/;"	p	class:v8::Number	access:private	signature:(v8::Value* obj)
CheckCast	/usr/include/v8/v8.h	/^  static void CheckCast(v8::Value* obj);$/;"	p	class:v8::String	access:private	signature:(v8::Value* obj)
CheckedGetInternalField	/usr/include/v8/v8.h	/^  Local<Value> CheckedGetInternalField(int index);$/;"	p	class:v8::Object	access:private	signature:(int index)
Clear	/usr/include/v8/v8.h	/^  void Clear() { this->val_ = 0; }$/;"	f	class:v8::Handle	access:public	signature:()
ClearWeak	/usr/include/v8/v8.h	/^  inline void ClearWeak();$/;"	p	class:v8::Persistent	access:public	signature:()
ClearWeak	/usr/include/v8/v8.h	/^  static void ClearWeak(internal::Object** global_handle);$/;"	p	class:v8::V8	access:private	signature:(internal::Object** global_handle)
ClearWeak	/usr/include/v8/v8.h	/^void Persistent<T>::ClearWeak() {$/;"	f	class:v8::Persistent	signature:()
ClientData	/usr/include/v8/v8-debug.h	/^  class ClientData {$/;"	c	class:v8::Debug	access:public
Clone	/usr/include/v8/v8.h	/^  Local<Object> Clone();$/;"	p	class:v8::Object	access:public	signature:()
CloneElementAt	/usr/include/v8/v8.h	/^  Local<Object> CloneElementAt(uint32_t index);$/;"	p	class:v8::Array	access:public	signature:(uint32_t index)
Close	/usr/include/v8/v8.h	/^  template <class T> Local<T> Close(Handle<T> value);$/;"	p	class:v8::HandleScope	access:public	signature:(Handle<T> value)
Close	/usr/include/v8/v8.h	/^Local<T> HandleScope::Close(Handle<T> value) {$/;"	f	class:v8::HandleScope	signature:(Handle<T> value)
Compile	/usr/include/v8/v8.h	/^  static Local<Script> Compile(Handle<String> source,$/;"	p	class:v8::Script	access:public	signature:(Handle<String> source, Handle<Value> file_name)
Compile	/usr/include/v8/v8.h	/^  static Local<Script> Compile(Handle<String> source,$/;"	p	class:v8::Script	access:public	signature:(Handle<String> source, ScriptOrigin* origin = NULL, ScriptData* pre_data = NULL)
Concat	/usr/include/v8/v8.h	/^  static Local<String> Concat(Handle<String> left, Handle<String>right);$/;"	p	class:v8::String	access:public	signature:(Handle<String> left, Handle<String>right)
Context	/usr/include/v8/v8.h	/^class V8EXPORT Context {$/;"	c	namespace:v8
ContextGenerator	/usr/include/v8/v8.h	/^typedef Persistent<Context> (*ContextGenerator)();$/;"	t	namespace:v8
CounterLookupCallback	/usr/include/v8/v8.h	/^typedef int* (*CounterLookupCallback)(const char* name);$/;"	t	namespace:v8
CreateHandle	/usr/include/v8/v8.h	/^  static internal::Object** CreateHandle(internal::Object* value);$/;"	p	class:v8::HandleScope	access:public	signature:(internal::Object* value)
CreateHistogramCallback	/usr/include/v8/v8.h	/^typedef void* (*CreateHistogramCallback)(const char* name,$/;"	t	namespace:v8
DEFAULT	/usr/include/v8/v8.h	/^  DEFAULT               = 0,$/;"	e	enum:v8::AccessControl
Data	/usr/include/v8/v8.h	/^  Data();$/;"	p	class:v8::Data	access:private	signature:()
Data	/usr/include/v8/v8.h	/^  class V8EXPORT Data {$/;"	c	class:v8::HandleScope	access:private
Data	/usr/include/v8/v8.h	/^  inline Local<Value> Data() const;$/;"	p	class:v8::AccessorInfo	access:public	signature:() const
Data	/usr/include/v8/v8.h	/^  inline Local<Value> Data() const;$/;"	p	class:v8::Arguments	access:public	signature:() const
Data	/usr/include/v8/v8.h	/^  virtual unsigned* Data() = 0;$/;"	p	class:v8::ScriptData	access:public	signature:()
Data	/usr/include/v8/v8.h	/^Local<Value> AccessorInfo::Data() const {$/;"	f	class:v8::AccessorInfo	signature:() const
Data	/usr/include/v8/v8.h	/^Local<Value> Arguments::Data() const {$/;"	f	class:v8::Arguments	signature:() const
Data	/usr/include/v8/v8.h	/^class V8EXPORT Data {$/;"	c	namespace:v8
Date	/usr/include/v8/v8.h	/^class V8EXPORT Date : public Value {$/;"	c	namespace:v8	inherits:Value
Debug	/usr/include/v8/v8-debug.h	/^class EXPORT Debug {$/;"	c	namespace:v8
DebugBreak	/usr/include/v8/v8-debug.h	/^  static void DebugBreak();$/;"	p	class:v8::Debug	access:public	signature:()
DebugEvent	/usr/include/v8/v8-debug.h	/^enum DebugEvent {$/;"	g	namespace:v8
DebugMessageDispatchHandler	/usr/include/v8/v8-debug.h	/^  typedef void (*DebugMessageDispatchHandler)();$/;"	t	class:v8::Debug	access:public
DeclareExtension	/usr/include/v8/v8.h	/^  inline DeclareExtension(Extension* extension) {$/;"	f	class:v8::DeclareExtension	access:public	signature:(Extension* extension)
DeclareExtension	/usr/include/v8/v8.h	/^class V8EXPORT DeclareExtension {$/;"	c	namespace:v8
Delete	/usr/include/v8/v8.h	/^  bool Delete(Handle<String> key);$/;"	p	class:v8::Object	access:public	signature:(Handle<String> key)
Delete	/usr/include/v8/v8.h	/^  bool Delete(uint32_t index);$/;"	p	class:v8::Object	access:public	signature:(uint32_t index)
DeleteHiddenValue	/usr/include/v8/v8.h	/^  bool DeleteHiddenValue(Handle<String> key);$/;"	p	class:v8::Object	access:public	signature:(Handle<String> key)
DetachGlobal	/usr/include/v8/v8.h	/^  void DetachGlobal();$/;"	p	class:v8::Context	access:public	signature:()
Dispose	/usr/include/v8/v8.h	/^  inline void Dispose();$/;"	p	class:v8::Persistent	access:public	signature:()
Dispose	/usr/include/v8/v8.h	/^  static bool Dispose();$/;"	p	class:v8::V8	access:public	signature:()
Dispose	/usr/include/v8/v8.h	/^void Persistent<T>::Dispose() {$/;"	f	class:v8::Persistent	signature:()
DisposeGlobal	/usr/include/v8/v8.h	/^  static void DisposeGlobal(internal::Object** global_handle);$/;"	p	class:v8::V8	access:private	signature:(internal::Object** global_handle)
DontDelete	/usr/include/v8/v8.h	/^  DontDelete = 1 << 2$/;"	e	enum:v8::PropertyAttribute
DontEnum	/usr/include/v8/v8.h	/^  DontEnum   = 1 << 1,$/;"	e	enum:v8::PropertyAttribute
EXPORT	/usr/include/v8/v8-debug.h	272;"	d
EXPORT	/usr/include/v8/v8-debug.h	47;"	d
EXPORT	/usr/include/v8/v8-debug.h	49;"	d
EXPORT	/usr/include/v8/v8-debug.h	51;"	d
EXPORT	/usr/include/v8/v8-debug.h	59;"	d
EXPORT	/usr/include/v8/v8-debug.h	61;"	d
Empty	/usr/include/v8/v8.h	/^  static v8::Local<v8::String> Empty();$/;"	p	class:v8::String	access:public	signature:()
EnableAgent	/usr/include/v8/v8-debug.h	/^  static bool EnableAgent(const char* name, int port,$/;"	p	class:v8::Debug	access:public	signature:(const char* name, int port, bool wait_for_connection = false)
EnableSlidingStateWindow	/usr/include/v8/v8.h	/^  static void EnableSlidingStateWindow();$/;"	p	class:v8::V8	access:public	signature:()
Enter	/usr/include/v8/v8.h	/^  void Enter();$/;"	p	class:v8::Context	access:public	signature:()
Equals	/usr/include/v8/v8.h	/^  bool Equals(Handle<Value> that) const;$/;"	p	class:v8::Value	access:public	signature:(Handle<Value> that) const
Error	/usr/include/v8/v8.h	/^  static Local<Value> Error(Handle<String> message);$/;"	p	class:v8::Exception	access:public	signature:(Handle<String> message)
EventCallback	/usr/include/v8/v8-debug.h	/^  typedef void (*EventCallback)(DebugEvent event,$/;"	t	class:v8::Debug	access:public
Exception	/usr/include/v8/v8-debug.h	/^  Exception = 2,$/;"	e	enum:v8::DebugEvent
Exception	/usr/include/v8/v8.h	/^  Local<Value> Exception() const;$/;"	p	class:v8::TryCatch	access:public	signature:() const
Exception	/usr/include/v8/v8.h	/^class V8EXPORT Exception {$/;"	c	namespace:v8
Exit	/usr/include/v8/v8.h	/^  void Exit();$/;"	p	class:v8::Context	access:public	signature:()
Extension	/usr/include/v8/v8.h	/^  Extension(const Extension&);$/;"	p	class:v8::Extension	access:private	signature:(const Extension&)
Extension	/usr/include/v8/v8.h	/^  Extension(const char* name,$/;"	p	class:v8::Extension	access:public	signature:(const char* name, const char* source = 0, int dep_count = 0, const char** deps = 0)
Extension	/usr/include/v8/v8.h	/^class V8EXPORT Extension {  \/\/ NOLINT$/;"	c	namespace:v8
ExtensionConfiguration	/usr/include/v8/v8.h	/^  ExtensionConfiguration(int name_count, const char* names[])$/;"	f	class:v8::ExtensionConfiguration	access:public	signature:(int name_count, const char* names[])
ExtensionConfiguration	/usr/include/v8/v8.h	/^class V8EXPORT ExtensionConfiguration {$/;"	c	namespace:v8
External	/usr/include/v8/v8.h	/^  External();$/;"	p	class:v8::External	access:private	signature:()
External	/usr/include/v8/v8.h	/^class V8EXPORT External : public Value {$/;"	c	namespace:v8	inherits:Value
ExternalArrayType	/usr/include/v8/v8.h	/^enum ExternalArrayType {$/;"	g	namespace:v8
ExternalAsciiStringResource	/usr/include/v8/v8.h	/^    ExternalAsciiStringResource() {}$/;"	f	class:v8::String::ExternalAsciiStringResource	access:protected	signature:()
ExternalAsciiStringResource	/usr/include/v8/v8.h	/^  class V8EXPORT ExternalAsciiStringResource$/;"	c	class:v8::String	inherits:ExternalStringResourceBase	access:public
ExternalStringResource	/usr/include/v8/v8.h	/^    ExternalStringResource() {}$/;"	f	class:v8::String::ExternalStringResource	access:protected	signature:()
ExternalStringResource	/usr/include/v8/v8.h	/^  class V8EXPORT ExternalStringResource$/;"	c	class:v8::String	inherits:ExternalStringResourceBase	access:public
ExternalStringResourceBase	/usr/include/v8/v8.h	/^    ExternalStringResourceBase() {}$/;"	f	class:v8::String::ExternalStringResourceBase	access:protected	signature:()
ExternalStringResourceBase	/usr/include/v8/v8.h	/^    ExternalStringResourceBase(const ExternalStringResourceBase&);$/;"	p	class:v8::String::ExternalStringResourceBase	access:private	signature:(const ExternalStringResourceBase&)
ExternalStringResourceBase	/usr/include/v8/v8.h	/^  class V8EXPORT ExternalStringResourceBase {$/;"	c	class:v8::String	access:public
FailedAccessCheckCallback	/usr/include/v8/v8.h	/^typedef void (*FailedAccessCheckCallback)(Local<Object> target,$/;"	t	namespace:v8
False	/usr/include/v8/v8.h	/^Handle<Boolean> V8EXPORT False();$/;"	p	namespace:v8	signature:()
FatalErrorCallback	/usr/include/v8/v8.h	/^typedef void (*FatalErrorCallback)(const char* location, const char* message);$/;"	t	namespace:v8
FindInstanceInPrototypeChain	/usr/include/v8/v8.h	/^  Local<Object> FindInstanceInPrototypeChain(Handle<FunctionTemplate> tmpl);$/;"	p	class:v8::Object	access:public	signature:(Handle<FunctionTemplate> tmpl)
ForceDelete	/usr/include/v8/v8.h	/^  bool ForceDelete(Handle<Value> key);$/;"	p	class:v8::Object	access:public	signature:(Handle<Value> key)
ForceSet	/usr/include/v8/v8.h	/^  bool ForceSet(Handle<Value> key,$/;"	p	class:v8::Object	access:public	signature:(Handle<Value> key, Handle<Value> value, PropertyAttribute attribs = None)
FullIsString	/usr/include/v8/v8.h	/^  bool FullIsString() const;$/;"	p	class:v8::Value	access:private	signature:() const
FullUnwrap	/usr/include/v8/v8.h	/^  static void* FullUnwrap(Handle<v8::Value> obj);$/;"	p	class:v8::External	access:private	signature:(Handle<v8::Value> obj)
Function	/usr/include/v8/v8.h	/^  Function();$/;"	p	class:v8::Function	access:private	signature:()
Function	/usr/include/v8/v8.h	/^class V8EXPORT Function : public Object {$/;"	c	namespace:v8	inherits:Object
FunctionTemplate	/usr/include/v8/v8.h	/^  FunctionTemplate();$/;"	p	class:v8::FunctionTemplate	access:private	signature:()
FunctionTemplate	/usr/include/v8/v8.h	/^class V8EXPORT FunctionTemplate : public Template {$/;"	c	namespace:v8	inherits:Template
GCCallback	/usr/include/v8/v8.h	/^typedef void (*GCCallback)();$/;"	t	namespace:v8
Get	/usr/include/v8/v8.h	/^  Local<String> Get() const;$/;"	p	class:v8::Message	access:public	signature:() const
Get	/usr/include/v8/v8.h	/^  Local<Value> Get(Handle<Value> key);$/;"	p	class:v8::Object	access:public	signature:(Handle<Value> key)
GetActiveProfilerModules	/usr/include/v8/v8.h	/^  static int GetActiveProfilerModules();$/;"	p	class:v8::V8	access:public	signature:()
GetCalling	/usr/include/v8/v8.h	/^  static Local<Context> GetCalling();$/;"	p	class:v8::Context	access:public	signature:()
GetClientData	/usr/include/v8/v8-debug.h	/^    virtual ClientData* GetClientData() const = 0;$/;"	p	class:v8::Debug::Message	access:public	signature:() const
GetCurrent	/usr/include/v8/v8.h	/^  static Local<Context> GetCurrent();$/;"	p	class:v8::Context	access:public	signature:()
GetCurrentThreadId	/usr/include/v8/v8.h	/^  static int GetCurrentThreadId();$/;"	p	class:v8::V8	access:public	signature:()
GetData	/usr/include/v8/v8.h	/^  Local<Value> GetData();$/;"	p	class:v8::Context	access:public	signature:()
GetEndColumn	/usr/include/v8/v8.h	/^  int GetEndColumn() const;$/;"	p	class:v8::Message	access:public	signature:() const
GetEndPosition	/usr/include/v8/v8.h	/^  int GetEndPosition() const;$/;"	p	class:v8::Message	access:public	signature:() const
GetEntered	/usr/include/v8/v8.h	/^  static Local<Context> GetEntered();$/;"	p	class:v8::Context	access:public	signature:()
GetEvent	/usr/include/v8/v8-debug.h	/^    virtual DebugEvent GetEvent() const = 0;$/;"	p	class:v8::Debug::Message	access:public	signature:() const
GetEventContext	/usr/include/v8/v8-debug.h	/^    virtual Handle<Context> GetEventContext() const = 0;$/;"	p	class:v8::Debug::Message	access:public	signature:() const
GetEventData	/usr/include/v8/v8-debug.h	/^    virtual Handle<Object> GetEventData() const = 0;$/;"	p	class:v8::Debug::Message	access:public	signature:() const
GetExecutionState	/usr/include/v8/v8-debug.h	/^    virtual Handle<Object> GetExecutionState() const = 0;$/;"	p	class:v8::Debug::Message	access:public	signature:() const
GetExternalAsciiStringResource	/usr/include/v8/v8.h	/^  ExternalAsciiStringResource* GetExternalAsciiStringResource() const;$/;"	p	class:v8::String	access:public	signature:() const
GetExternalPointer	/usr/include/v8/v8.h	/^  static inline void* GetExternalPointer(internal::Object* obj) {$/;"	f	class:v8::internal::Internals	access:public	signature:(internal::Object* obj)
GetExternalStringResource	/usr/include/v8/v8.h	/^  inline ExternalStringResource* GetExternalStringResource() const;$/;"	p	class:v8::String	access:public	signature:() const
GetExternalStringResource	/usr/include/v8/v8.h	/^String::ExternalStringResource* String::GetExternalStringResource() const {$/;"	f	class:v8::String	signature:() const
GetFunction	/usr/include/v8/v8.h	/^  Local<Function> GetFunction();$/;"	p	class:v8::FunctionTemplate	access:public	signature:()
GetHeapStatistics	/usr/include/v8/v8.h	/^  static void GetHeapStatistics(HeapStatistics* heap_statistics);$/;"	p	class:v8::V8	access:public	signature:(HeapStatistics* heap_statistics)
GetHiddenValue	/usr/include/v8/v8.h	/^  Local<Value> GetHiddenValue(Handle<String> key);$/;"	p	class:v8::Object	access:public	signature:(Handle<String> key)
GetIdentityHash	/usr/include/v8/v8.h	/^  int GetIdentityHash();$/;"	p	class:v8::Object	access:public	signature:()
GetInstanceType	/usr/include/v8/v8.h	/^  static inline int GetInstanceType(internal::Object* obj) {$/;"	f	class:v8::internal::Internals	access:public	signature:(internal::Object* obj)
GetInternalField	/usr/include/v8/v8.h	/^  inline Local<Value> GetInternalField(int index);$/;"	p	class:v8::Object	access:public	signature:(int index)
GetInternalField	/usr/include/v8/v8.h	/^Local<Value> Object::GetInternalField(int index) {$/;"	f	class:v8::Object	signature:(int index)
GetJSON	/usr/include/v8/v8-debug.h	/^    virtual Handle<String> GetJSON() const = 0;$/;"	p	class:v8::Debug::Message	access:public	signature:() const
GetLineNumber	/usr/include/v8/v8.h	/^  int GetLineNumber() const;$/;"	p	class:v8::Message	access:public	signature:() const
GetLogLines	/usr/include/v8/v8.h	/^  static int GetLogLines(int from_pos, char* dest_buf, int max_size);$/;"	p	class:v8::V8	access:public	signature:(int from_pos, char* dest_buf, int max_size)
GetMirror	/usr/include/v8/v8-debug.h	/^  static Local<Value> GetMirror(v8::Handle<v8::Value> obj);$/;"	p	class:v8::Debug	access:public	signature:(v8::Handle<v8::Value> obj)
GetName	/usr/include/v8/v8.h	/^  Handle<Value> GetName() const;$/;"	p	class:v8::Function	access:public	signature:() const
GetNativeFunction	/usr/include/v8/v8.h	/^      GetNativeFunction(v8::Handle<v8::String> name) {$/;"	f	class:v8::Extension	access:public	signature:(v8::Handle<v8::String> name)
GetPointerFromInternalField	/usr/include/v8/v8.h	/^  inline void* GetPointerFromInternalField(int index);$/;"	p	class:v8::Object	access:public	signature:(int index)
GetPointerFromInternalField	/usr/include/v8/v8.h	/^void* Object::GetPointerFromInternalField(int index) {$/;"	f	class:v8::Object	signature:(int index)
GetPropertyNames	/usr/include/v8/v8.h	/^  Local<Array> GetPropertyNames();$/;"	p	class:v8::Object	access:public	signature:()
GetPrototype	/usr/include/v8/v8.h	/^  Local<Value> GetPrototype();$/;"	p	class:v8::Object	access:public	signature:()
GetRealNamedProperty	/usr/include/v8/v8.h	/^  Local<Value> GetRealNamedProperty(Handle<String> key);$/;"	p	class:v8::Object	access:public	signature:(Handle<String> key)
GetRealNamedPropertyInPrototypeChain	/usr/include/v8/v8.h	/^  Local<Value> GetRealNamedPropertyInPrototypeChain(Handle<String> key);$/;"	p	class:v8::Object	access:public	signature:(Handle<String> key)
GetScriptData	/usr/include/v8/v8.h	/^  Handle<Value> GetScriptData() const;$/;"	p	class:v8::Message	access:public	signature:() const
GetScriptResourceName	/usr/include/v8/v8.h	/^  Handle<Value> GetScriptResourceName() const;$/;"	p	class:v8::Message	access:public	signature:() const
GetSecurityToken	/usr/include/v8/v8.h	/^  Handle<Value> GetSecurityToken();$/;"	p	class:v8::Context	access:public	signature:()
GetSourceLine	/usr/include/v8/v8.h	/^  Local<String> GetSourceLine() const;$/;"	p	class:v8::Message	access:public	signature:() const
GetStartColumn	/usr/include/v8/v8.h	/^  int GetStartColumn() const;$/;"	p	class:v8::Message	access:public	signature:() const
GetStartPosition	/usr/include/v8/v8.h	/^  int GetStartPosition() const;$/;"	p	class:v8::Message	access:public	signature:() const
GetVersion	/usr/include/v8/v8.h	/^  static const char* GetVersion();$/;"	p	class:v8::V8	access:public	signature:()
Global	/usr/include/v8/v8.h	/^  Local<Object> Global();$/;"	p	class:v8::Context	access:public	signature:()
GlobalizeReference	/usr/include/v8/v8.h	/^  static internal::Object** GlobalizeReference(internal::Object** handle);$/;"	p	class:v8::V8	access:private	signature:(internal::Object** handle)
Handle	/usr/include/v8/v8.h	/^  explicit Handle(T* val) : val_(val) { }$/;"	f	class:v8::Handle	access:public	signature:(T* val)
Handle	/usr/include/v8/v8.h	/^  inline Handle();$/;"	p	class:v8::Handle	access:public	signature:()
Handle	/usr/include/v8/v8.h	/^  template <class S> inline Handle(Handle<S> that)$/;"	f	class:v8::Handle	access:public	signature:(Handle<S> that)
Handle	/usr/include/v8/v8.h	/^Handle<T>::Handle() : val_(0) { }$/;"	f	class:v8::Handle	signature:()
Handle	/usr/include/v8/v8.h	/^template <class T> class V8EXPORT_INLINE Handle {$/;"	c	namespace:v8
HandleScope	/usr/include/v8/v8.h	/^  HandleScope();$/;"	p	class:v8::HandleScope	access:public	signature:()
HandleScope	/usr/include/v8/v8.h	/^  HandleScope(const HandleScope&);$/;"	p	class:v8::HandleScope	access:private	signature:(const HandleScope&)
HandleScope	/usr/include/v8/v8.h	/^class V8EXPORT HandleScope {$/;"	c	namespace:v8
Has	/usr/include/v8/v8.h	/^  bool Has(Handle<String> key);$/;"	p	class:v8::Object	access:public	signature:(Handle<String> key)
Has	/usr/include/v8/v8.h	/^  bool Has(uint32_t index);$/;"	p	class:v8::Object	access:public	signature:(uint32_t index)
HasCaught	/usr/include/v8/v8.h	/^  bool HasCaught() const;$/;"	p	class:v8::TryCatch	access:public	signature:() const
HasError	/usr/include/v8/v8.h	/^  virtual bool HasError() = 0;$/;"	p	class:v8::ScriptData	access:public	signature:()
HasHeapObjectTag	/usr/include/v8/v8.h	/^  static inline bool HasHeapObjectTag(internal::Object* value) {$/;"	f	class:v8::internal::Internals	access:public	signature:(internal::Object* value)
HasIndexedLookupInterceptor	/usr/include/v8/v8.h	/^  bool HasIndexedLookupInterceptor();$/;"	p	class:v8::Object	access:public	signature:()
HasInstance	/usr/include/v8/v8.h	/^  bool HasInstance(Handle<Value> object);$/;"	p	class:v8::FunctionTemplate	access:public	signature:(Handle<Value> object)
HasNamedLookupInterceptor	/usr/include/v8/v8.h	/^  bool HasNamedLookupInterceptor();$/;"	p	class:v8::Object	access:public	signature:()
HasOutOfMemoryException	/usr/include/v8/v8.h	/^  bool HasOutOfMemoryException();$/;"	p	class:v8::Context	access:public	signature:()
HasRealIndexedProperty	/usr/include/v8/v8.h	/^  bool HasRealIndexedProperty(uint32_t index);$/;"	p	class:v8::Object	access:public	signature:(uint32_t index)
HasRealNamedCallbackProperty	/usr/include/v8/v8.h	/^  bool HasRealNamedCallbackProperty(Handle<String> key);$/;"	p	class:v8::Object	access:public	signature:(Handle<String> key)
HasRealNamedProperty	/usr/include/v8/v8.h	/^  bool HasRealNamedProperty(Handle<String> key);$/;"	p	class:v8::Object	access:public	signature:(Handle<String> key)
HasSmiTag	/usr/include/v8/v8.h	/^  static inline bool HasSmiTag(internal::Object* value) {$/;"	f	class:v8::internal::Internals	access:public	signature:(internal::Object* value)
HeapStatistics	/usr/include/v8/v8.h	/^  HeapStatistics();$/;"	p	class:v8::HeapStatistics	access:public	signature:()
HeapStatistics	/usr/include/v8/v8.h	/^class V8EXPORT HeapStatistics {$/;"	c	namespace:v8
Holder	/usr/include/v8/v8.h	/^  inline Local<Object> Holder() const;$/;"	p	class:v8::AccessorInfo	access:public	signature:() const
Holder	/usr/include/v8/v8.h	/^  inline Local<Object> Holder() const;$/;"	p	class:v8::Arguments	access:public	signature:() const
Holder	/usr/include/v8/v8.h	/^Local<Object> AccessorInfo::Holder() const {$/;"	f	class:v8::AccessorInfo	signature:() const
Holder	/usr/include/v8/v8.h	/^Local<Object> Arguments::Holder() const {$/;"	f	class:v8::Arguments	signature:() const
HostDispatchHandler	/usr/include/v8/v8-debug.h	/^  typedef void (*HostDispatchHandler)();$/;"	t	class:v8::Debug	access:public
Id	/usr/include/v8/v8.h	/^  Local<Value> Id();$/;"	p	class:v8::Script	access:public	signature:()
IdleNotification	/usr/include/v8/v8.h	/^  static bool IdleNotification();$/;"	p	class:v8::V8	access:public	signature:()
IgnoreOutOfMemoryException	/usr/include/v8/v8.h	/^  static void IgnoreOutOfMemoryException();$/;"	p	class:v8::V8	access:public	signature:()
InContext	/usr/include/v8/v8.h	/^  static bool InContext();$/;"	p	class:v8::Context	access:public	signature:()
IndexedPropertyDeleter	/usr/include/v8/v8.h	/^typedef Handle<Boolean> (*IndexedPropertyDeleter)(uint32_t index,$/;"	t	namespace:v8
IndexedPropertyEnumerator	/usr/include/v8/v8.h	/^typedef Handle<Array> (*IndexedPropertyEnumerator)(const AccessorInfo& info);$/;"	t	namespace:v8
IndexedPropertyGetter	/usr/include/v8/v8.h	/^typedef Handle<Value> (*IndexedPropertyGetter)(uint32_t index,$/;"	t	namespace:v8
IndexedPropertyQuery	/usr/include/v8/v8.h	/^typedef Handle<Boolean> (*IndexedPropertyQuery)(uint32_t index,$/;"	t	namespace:v8
IndexedPropertySetter	/usr/include/v8/v8.h	/^typedef Handle<Value> (*IndexedPropertySetter)(uint32_t index,$/;"	t	namespace:v8
IndexedSecurityCallback	/usr/include/v8/v8.h	/^typedef bool (*IndexedSecurityCallback)(Local<Object> host,$/;"	t	namespace:v8
Inherit	/usr/include/v8/v8.h	/^  void Inherit(Handle<FunctionTemplate> parent);$/;"	p	class:v8::FunctionTemplate	access:public	signature:(Handle<FunctionTemplate> parent)
Initialize	/usr/include/v8/v8.h	/^    inline void Initialize() {$/;"	f	class:v8::HandleScope::Data	access:public	signature:()
Initialize	/usr/include/v8/v8.h	/^  static bool Initialize();$/;"	p	class:v8::V8	access:public	signature:()
InstanceTemplate	/usr/include/v8/v8.h	/^  Local<ObjectTemplate> InstanceTemplate();$/;"	p	class:v8::FunctionTemplate	access:public	signature:()
Int32	/usr/include/v8/v8.h	/^  Int32();$/;"	p	class:v8::Int32	access:private	signature:()
Int32	/usr/include/v8/v8.h	/^class V8EXPORT Int32 : public Integer {$/;"	c	namespace:v8	inherits:Integer
Int32Value	/usr/include/v8/v8.h	/^  int32_t Int32Value() const;$/;"	p	class:v8::Value	access:public	signature:() const
Integer	/usr/include/v8/v8.h	/^  Integer();$/;"	p	class:v8::Integer	access:private	signature:()
Integer	/usr/include/v8/v8.h	/^class V8EXPORT Integer : public Number {$/;"	c	namespace:v8	inherits:Number
IntegerValue	/usr/include/v8/v8.h	/^  int64_t IntegerValue() const;$/;"	p	class:v8::Value	access:public	signature:() const
InternalConstants	/usr/include/v8/v8.h	/^template <> struct InternalConstants<4> {$/;"	s	namespace:v8::internal
InternalConstants	/usr/include/v8/v8.h	/^template <> struct InternalConstants<8> {$/;"	s	namespace:v8::internal
InternalFieldCount	/usr/include/v8/v8.h	/^  int InternalFieldCount();$/;"	p	class:v8::Object	access:public	signature:()
InternalFieldCount	/usr/include/v8/v8.h	/^  int InternalFieldCount();$/;"	p	class:v8::ObjectTemplate	access:public	signature:()
Internals	/usr/include/v8/v8.h	/^class Internals {$/;"	c	namespace:v8::internal
InvocationCallback	/usr/include/v8/v8.h	/^typedef Handle<Value> (*InvocationCallback)(const Arguments& args);$/;"	t	namespace:v8
IsActive	/usr/include/v8/v8.h	/^  static bool IsActive() { return active_; }$/;"	f	class:v8::Locker	access:public	signature:()
IsArray	/usr/include/v8/v8.h	/^  bool IsArray() const;$/;"	p	class:v8::Value	access:public	signature:() const
IsBoolean	/usr/include/v8/v8.h	/^  bool IsBoolean() const;$/;"	p	class:v8::Value	access:public	signature:() const
IsConstructCall	/usr/include/v8/v8.h	/^  inline bool IsConstructCall() const;$/;"	p	class:v8::Arguments	access:public	signature:() const
IsConstructCall	/usr/include/v8/v8.h	/^bool Arguments::IsConstructCall() const {$/;"	f	class:v8::Arguments	signature:() const
IsDate	/usr/include/v8/v8.h	/^  bool IsDate() const;$/;"	p	class:v8::Value	access:public	signature:() const
IsDead	/usr/include/v8/v8.h	/^  static bool IsDead();$/;"	p	class:v8::V8	access:public	signature:()
IsDirty	/usr/include/v8/v8.h	/^  bool IsDirty();$/;"	p	class:v8::Object	access:public	signature:()
IsEmpty	/usr/include/v8/v8.h	/^  bool IsEmpty() const { return val_ == 0; }$/;"	f	class:v8::Handle	access:public	signature:() const
IsEvent	/usr/include/v8/v8-debug.h	/^    virtual bool IsEvent() const = 0;$/;"	p	class:v8::Debug::Message	access:public	signature:() const
IsExternal	/usr/include/v8/v8.h	/^  bool IsExternal() const;$/;"	p	class:v8::String	access:public	signature:() const
IsExternal	/usr/include/v8/v8.h	/^  bool IsExternal() const;$/;"	p	class:v8::Value	access:public	signature:() const
IsExternalAscii	/usr/include/v8/v8.h	/^  bool IsExternalAscii() const;$/;"	p	class:v8::String	access:public	signature:() const
IsExternalTwoByteString	/usr/include/v8/v8.h	/^  static inline bool IsExternalTwoByteString(int instance_type) {$/;"	f	class:v8::internal::Internals	access:public	signature:(int instance_type)
IsFalse	/usr/include/v8/v8.h	/^  bool IsFalse() const;$/;"	p	class:v8::Value	access:public	signature:() const
IsFunction	/usr/include/v8/v8.h	/^  bool IsFunction() const;$/;"	p	class:v8::Value	access:public	signature:() const
IsGlobalNearDeath	/usr/include/v8/v8.h	/^  static bool IsGlobalNearDeath(internal::Object** global_handle);$/;"	p	class:v8::V8	access:private	signature:(internal::Object** global_handle)
IsGlobalWeak	/usr/include/v8/v8.h	/^  static bool IsGlobalWeak(internal::Object** global_handle);$/;"	p	class:v8::V8	access:private	signature:(internal::Object** global_handle)
IsInt32	/usr/include/v8/v8.h	/^  bool IsInt32() const;$/;"	p	class:v8::Value	access:public	signature:() const
IsLocked	/usr/include/v8/v8.h	/^  static bool IsLocked();$/;"	p	class:v8::Locker	access:public	signature:()
IsNearDeath	/usr/include/v8/v8.h	/^  inline bool IsNearDeath() const;$/;"	p	class:v8::Persistent	access:public	signature:() const
IsNearDeath	/usr/include/v8/v8.h	/^bool Persistent<T>::IsNearDeath() const {$/;"	f	class:v8::Persistent	signature:() const
IsNull	/usr/include/v8/v8.h	/^  bool IsNull() const;$/;"	p	class:v8::Value	access:public	signature:() const
IsNumber	/usr/include/v8/v8.h	/^  bool IsNumber() const;$/;"	p	class:v8::Value	access:public	signature:() const
IsObject	/usr/include/v8/v8.h	/^  bool IsObject() const;$/;"	p	class:v8::Value	access:public	signature:() const
IsProfilerPaused	/usr/include/v8/v8.h	/^  static bool IsProfilerPaused();$/;"	p	class:v8::V8	access:public	signature:()
IsResponse	/usr/include/v8/v8-debug.h	/^    virtual bool IsResponse() const = 0;$/;"	p	class:v8::Debug::Message	access:public	signature:() const
IsString	/usr/include/v8/v8.h	/^  inline bool IsString() const;$/;"	p	class:v8::Value	access:public	signature:() const
IsString	/usr/include/v8/v8.h	/^bool Value::IsString() const {$/;"	f	class:v8::Value	signature:() const
IsTrue	/usr/include/v8/v8.h	/^  bool IsTrue() const;$/;"	p	class:v8::Value	access:public	signature:() const
IsUndefined	/usr/include/v8/v8.h	/^  bool IsUndefined() const;$/;"	p	class:v8::Value	access:public	signature:() const
IsWeak	/usr/include/v8/v8.h	/^  inline bool IsWeak() const;$/;"	p	class:v8::Persistent	access:public	signature:() const
IsWeak	/usr/include/v8/v8.h	/^bool Persistent<T>::IsWeak() const {$/;"	f	class:v8::Persistent	signature:() const
Length	/usr/include/v8/v8.h	/^  inline int Length() const;$/;"	p	class:v8::Arguments	access:public	signature:() const
Length	/usr/include/v8/v8.h	/^  int Length() const;$/;"	p	class:v8::String	access:public	signature:() const
Length	/usr/include/v8/v8.h	/^  uint32_t Length() const;$/;"	p	class:v8::Array	access:public	signature:() const
Length	/usr/include/v8/v8.h	/^  virtual int Length() = 0;$/;"	p	class:v8::ScriptData	access:public	signature:()
Length	/usr/include/v8/v8.h	/^int Arguments::Length() const {$/;"	f	class:v8::Arguments	signature:() const
Local	/usr/include/v8/v8.h	/^  inline Local();$/;"	p	class:v8::Local	access:public	signature:()
Local	/usr/include/v8/v8.h	/^  template <class S> inline Local(Local<S> that)$/;"	f	class:v8::Local	access:public	signature:(Local<S> that)
Local	/usr/include/v8/v8.h	/^  template <class S> inline Local(S* that) : Handle<T>(that) { }$/;"	f	class:v8::Local	access:public	signature:(S* that)
Local	/usr/include/v8/v8.h	/^Local<T>::Local() : Handle<T>() { }$/;"	f	class:v8::Local	signature:()
Local	/usr/include/v8/v8.h	/^template <class T> class V8EXPORT_INLINE Local : public Handle<T> {$/;"	c	namespace:v8	inherits:Handle
Locker	/usr/include/v8/v8.h	/^  Locker();$/;"	p	class:v8::Locker	access:public	signature:()
Locker	/usr/include/v8/v8.h	/^  Locker(const Locker&);$/;"	p	class:v8::Locker	access:private	signature:(const Locker&)
Locker	/usr/include/v8/v8.h	/^class V8EXPORT Locker {$/;"	c	namespace:v8
LookupCallback	/usr/include/v8/v8.h	/^typedef int (*LookupCallback)(Local<Object> self, Local<String> name);$/;"	t	namespace:v8
LowMemoryNotification	/usr/include/v8/v8.h	/^  static void LowMemoryNotification();$/;"	p	class:v8::V8	access:public	signature:()
MakeExternal	/usr/include/v8/v8.h	/^  bool MakeExternal(ExternalAsciiStringResource* resource);$/;"	p	class:v8::String	access:public	signature:(ExternalAsciiStringResource* resource)
MakeExternal	/usr/include/v8/v8.h	/^  bool MakeExternal(ExternalStringResource* resource);$/;"	p	class:v8::String	access:public	signature:(ExternalStringResource* resource)
MakeWeak	/usr/include/v8/v8.h	/^  inline void MakeWeak(void* parameters, WeakReferenceCallback callback);$/;"	p	class:v8::Persistent	access:public	signature:(void* parameters, WeakReferenceCallback callback)
MakeWeak	/usr/include/v8/v8.h	/^  static void MakeWeak(internal::Object** global_handle,$/;"	p	class:v8::V8	access:private	signature:(internal::Object** global_handle, void* data, WeakReferenceCallback)
MakeWeak	/usr/include/v8/v8.h	/^void Persistent<T>::MakeWeak(void* parameters, WeakReferenceCallback callback) {$/;"	f	class:v8::Persistent	signature:(void* parameters, WeakReferenceCallback callback)
MarkAsUndetectable	/usr/include/v8/v8.h	/^  void MarkAsUndetectable();$/;"	p	class:v8::ObjectTemplate	access:public	signature:()
Message	/usr/include/v8/v8-debug.h	/^  class Message {$/;"	c	class:v8::Debug	access:public
Message	/usr/include/v8/v8.h	/^  Local<v8::Message> Message() const;$/;"	p	class:v8::TryCatch	access:public	signature:() const
Message	/usr/include/v8/v8.h	/^class V8EXPORT Message {$/;"	c	namespace:v8
MessageCallback	/usr/include/v8/v8.h	/^typedef void (*MessageCallback)(Handle<Message> message, Handle<Value> data);$/;"	t	namespace:v8
MessageHandler	/usr/include/v8/v8-debug.h	/^  typedef void (*MessageHandler)(const uint16_t* message, int length,$/;"	t	class:v8::Debug	access:public
MessageHandler2	/usr/include/v8/v8-debug.h	/^  typedef void (*MessageHandler2)(const Message& message);$/;"	t	class:v8::Debug	access:public
NamedPropertyDeleter	/usr/include/v8/v8.h	/^typedef Handle<Boolean> (*NamedPropertyDeleter)(Local<String> property,$/;"	t	namespace:v8
NamedPropertyEnumerator	/usr/include/v8/v8.h	/^typedef Handle<Array> (*NamedPropertyEnumerator)(const AccessorInfo& info);$/;"	t	namespace:v8
NamedPropertyGetter	/usr/include/v8/v8.h	/^typedef Handle<Value> (*NamedPropertyGetter)(Local<String> property,$/;"	t	namespace:v8
NamedPropertyQuery	/usr/include/v8/v8.h	/^typedef Handle<Boolean> (*NamedPropertyQuery)(Local<String> property,$/;"	t	namespace:v8
NamedPropertySetter	/usr/include/v8/v8.h	/^typedef Handle<Value> (*NamedPropertySetter)(Local<String> property,$/;"	t	namespace:v8
NamedSecurityCallback	/usr/include/v8/v8.h	/^typedef bool (*NamedSecurityCallback)(Local<Object> host,$/;"	t	namespace:v8
New	/usr/include/v8/v8.h	/^   static Local<Script> New(Handle<String> source,$/;"	p	class:v8::Script	access:public	signature:(Handle<String> source, Handle<Value> file_name)
New	/usr/include/v8/v8.h	/^   static Local<Script> New(Handle<String> source,$/;"	p	class:v8::Script	access:public	signature:(Handle<String> source, ScriptOrigin* origin = NULL, ScriptData* pre_data = NULL)
New	/usr/include/v8/v8.h	/^  inline static Local<T> New(Handle<T> that);$/;"	p	class:v8::Local	access:public	signature:(Handle<T> that)
New	/usr/include/v8/v8.h	/^  inline static Persistent<T> New(Handle<T> that);$/;"	p	class:v8::Persistent	access:public	signature:(Handle<T> that)
New	/usr/include/v8/v8.h	/^  static Local<Array> New(int length = 0);$/;"	p	class:v8::Array	access:public	signature:(int length = 0)
New	/usr/include/v8/v8.h	/^  static Local<External> New(void* value);$/;"	p	class:v8::External	access:public	signature:(void* value)
New	/usr/include/v8/v8.h	/^  static Local<FunctionTemplate> New($/;"	p	class:v8::FunctionTemplate	access:public	signature:( InvocationCallback callback = 0, Handle<Value> data = Handle<Value>(), Handle<Signature> signature = Handle<Signature>())
New	/usr/include/v8/v8.h	/^  static Local<Integer> New(int32_t value);$/;"	p	class:v8::Integer	access:public	signature:(int32_t value)
New	/usr/include/v8/v8.h	/^  static Local<Number> New(double value);$/;"	p	class:v8::Number	access:public	signature:(double value)
New	/usr/include/v8/v8.h	/^  static Local<Object> New();$/;"	p	class:v8::Object	access:public	signature:()
New	/usr/include/v8/v8.h	/^  static Local<ObjectTemplate> New();$/;"	p	class:v8::ObjectTemplate	access:public	signature:()
New	/usr/include/v8/v8.h	/^  static Local<ObjectTemplate> New(Handle<FunctionTemplate> constructor);$/;"	p	class:v8::ObjectTemplate	access:private	signature:(Handle<FunctionTemplate> constructor)
New	/usr/include/v8/v8.h	/^  static Local<Signature> New(Handle<FunctionTemplate> receiver =$/;"	p	class:v8::Signature	access:public	signature:(Handle<FunctionTemplate> receiver = Handle<FunctionTemplate>(), int argc = 0, Handle<FunctionTemplate> argv[] = 0)
New	/usr/include/v8/v8.h	/^  static Local<String> New(const char* data, int length = -1);$/;"	p	class:v8::String	access:public	signature:(const char* data, int length = -1)
New	/usr/include/v8/v8.h	/^  static Local<String> New(const uint16_t* data, int length = -1);$/;"	p	class:v8::String	access:public	signature:(const uint16_t* data, int length = -1)
New	/usr/include/v8/v8.h	/^  static Local<TypeSwitch> New(Handle<FunctionTemplate> type);$/;"	p	class:v8::TypeSwitch	access:public	signature:(Handle<FunctionTemplate> type)
New	/usr/include/v8/v8.h	/^  static Local<TypeSwitch> New(int argc, Handle<FunctionTemplate> types[]);$/;"	p	class:v8::TypeSwitch	access:public	signature:(int argc, Handle<FunctionTemplate> types[])
New	/usr/include/v8/v8.h	/^  static Local<Value> New(double time);$/;"	p	class:v8::Date	access:public	signature:(double time)
New	/usr/include/v8/v8.h	/^  static Persistent<Context> New($/;"	p	class:v8::Context	access:public	signature:( ExtensionConfiguration* extensions = 0, Handle<ObjectTemplate> global_template = Handle<ObjectTemplate>(), Handle<Value> global_object = Handle<Value>())
New	/usr/include/v8/v8.h	/^  static ScriptData* New(unsigned* data, int length);$/;"	p	class:v8::ScriptData	access:public	signature:(unsigned* data, int length)
New	/usr/include/v8/v8.h	/^  static inline Handle<Boolean> New(bool value);$/;"	p	class:v8::Boolean	access:public	signature:(bool value)
New	/usr/include/v8/v8.h	/^Handle<Boolean> Boolean::New(bool value) {$/;"	f	class:v8::Boolean	signature:(bool value)
New	/usr/include/v8/v8.h	/^Local<T> Local<T>::New(Handle<T> that) {$/;"	f	class:v8::Local	signature:(Handle<T> that)
New	/usr/include/v8/v8.h	/^Persistent<T> Persistent<T>::New(Handle<T> that) {$/;"	f	class:v8::Persistent	signature:(Handle<T> that)
NewExternal	/usr/include/v8/v8.h	/^  static Local<String> NewExternal(ExternalAsciiStringResource* resource);$/;"	p	class:v8::String	access:public	signature:(ExternalAsciiStringResource* resource)
NewExternal	/usr/include/v8/v8.h	/^  static Local<String> NewExternal(ExternalStringResource* resource);$/;"	p	class:v8::String	access:public	signature:(ExternalStringResource* resource)
NewFromUnsigned	/usr/include/v8/v8.h	/^  static Local<Integer> NewFromUnsigned(uint32_t value);$/;"	p	class:v8::Integer	access:public	signature:(uint32_t value)
NewFunction	/usr/include/v8/v8-debug.h	/^  NewFunction = 3,$/;"	e	enum:v8::DebugEvent
NewInstance	/usr/include/v8/v8.h	/^  Local<Object> NewInstance() const;$/;"	p	class:v8::Function	access:public	signature:() const
NewInstance	/usr/include/v8/v8.h	/^  Local<Object> NewInstance();$/;"	p	class:v8::ObjectTemplate	access:public	signature:()
NewInstance	/usr/include/v8/v8.h	/^  Local<Object> NewInstance(int argc, Handle<Value> argv[]) const;$/;"	p	class:v8::Function	access:public	signature:(int argc, Handle<Value> argv[]) const
NewSymbol	/usr/include/v8/v8.h	/^  static Local<String> NewSymbol(const char* data, int length = -1);$/;"	p	class:v8::String	access:public	signature:(const char* data, int length = -1)
NewUndetectable	/usr/include/v8/v8.h	/^  static Local<String> NewUndetectable(const char* data, int length = -1);$/;"	p	class:v8::String	access:public	signature:(const char* data, int length = -1)
NewUndetectable	/usr/include/v8/v8.h	/^  static Local<String> NewUndetectable(const uint16_t* data, int length = -1);$/;"	p	class:v8::String	access:public	signature:(const uint16_t* data, int length = -1)
None	/usr/include/v8/v8.h	/^  None       = 0,$/;"	e	enum:v8::PropertyAttribute
Null	/usr/include/v8/v8.h	/^Handle<Primitive> V8EXPORT Null();$/;"	p	namespace:v8	signature:()
Number	/usr/include/v8/v8.h	/^  Number();$/;"	p	class:v8::Number	access:private	signature:()
Number	/usr/include/v8/v8.h	/^class V8EXPORT Number : public Primitive {$/;"	c	namespace:v8	inherits:Primitive
NumberOfHandles	/usr/include/v8/v8.h	/^  static int NumberOfHandles();$/;"	p	class:v8::HandleScope	access:public	signature:()
NumberValue	/usr/include/v8/v8.h	/^  double NumberValue() const;$/;"	p	class:v8::Date	access:public	signature:() const
NumberValue	/usr/include/v8/v8.h	/^  double NumberValue() const;$/;"	p	class:v8::Value	access:public	signature:() const
Object	/usr/include/v8/v8.h	/^  Object();$/;"	p	class:v8::Object	access:private	signature:()
Object	/usr/include/v8/v8.h	/^class V8EXPORT Object : public Value {$/;"	c	namespace:v8	inherits:Value
ObjectProtoToString	/usr/include/v8/v8.h	/^  Local<String> ObjectProtoToString();$/;"	p	class:v8::Object	access:public	signature:()
ObjectTemplate	/usr/include/v8/v8.h	/^  ObjectTemplate();$/;"	p	class:v8::ObjectTemplate	access:private	signature:()
ObjectTemplate	/usr/include/v8/v8.h	/^class V8EXPORT ObjectTemplate : public Template {$/;"	c	namespace:v8	inherits:Template
PROFILER_MODULE_CPU	/usr/include/v8/v8.h	/^  PROFILER_MODULE_CPU             = 1,$/;"	e	enum:v8::ProfilerModules
PROFILER_MODULE_HEAP_SNAPSHOT	/usr/include/v8/v8.h	/^  PROFILER_MODULE_HEAP_SNAPSHOT   = 1 << 16$/;"	e	enum:v8::ProfilerModules
PROFILER_MODULE_HEAP_STATS	/usr/include/v8/v8.h	/^  PROFILER_MODULE_HEAP_STATS      = 1 << 1,$/;"	e	enum:v8::ProfilerModules
PROFILER_MODULE_JS_CONSTRUCTORS	/usr/include/v8/v8.h	/^  PROFILER_MODULE_JS_CONSTRUCTORS = 1 << 2,$/;"	e	enum:v8::ProfilerModules
PROFILER_MODULE_NONE	/usr/include/v8/v8.h	/^  PROFILER_MODULE_NONE            = 0,$/;"	e	enum:v8::ProfilerModules
PROHIBITS_OVERWRITING	/usr/include/v8/v8.h	/^  PROHIBITS_OVERWRITING = 1 << 2$/;"	e	enum:v8::AccessControl
PauseProfiler	/usr/include/v8/v8.h	/^  static void PauseProfiler();$/;"	p	class:v8::V8	access:public	signature:()
PauseProfilerEx	/usr/include/v8/v8.h	/^  static void PauseProfilerEx(int flags);$/;"	p	class:v8::V8	access:public	signature:(int flags)
Persistent	/usr/include/v8/v8.h	/^  inline Persistent();$/;"	p	class:v8::Persistent	access:public	signature:()
Persistent	/usr/include/v8/v8.h	/^  template <class S> explicit inline Persistent(Handle<S> that)$/;"	f	class:v8::Persistent	access:public	signature:(Handle<S> that)
Persistent	/usr/include/v8/v8.h	/^  template <class S> inline Persistent(Persistent<S> that)$/;"	f	class:v8::Persistent	access:public	signature:(Persistent<S> that)
Persistent	/usr/include/v8/v8.h	/^  template <class S> inline Persistent(S* that) : Handle<T>(that) { }$/;"	f	class:v8::Persistent	access:public	signature:(S* that)
Persistent	/usr/include/v8/v8.h	/^Persistent<T>::Persistent() : Handle<T>() { }$/;"	f	class:v8::Persistent	signature:()
Persistent	/usr/include/v8/v8.h	/^template <class T> class V8EXPORT_INLINE Persistent : public Handle<T> {$/;"	c	namespace:v8	inherits:Handle
PreCompile	/usr/include/v8/v8.h	/^  static ScriptData* PreCompile(const char* input, int length);$/;"	p	class:v8::ScriptData	access:public	signature:(const char* input, int length)
Primitive	/usr/include/v8/v8.h	/^class V8EXPORT Primitive : public Value { };$/;"	c	namespace:v8	inherits:Value
PrintCurrentStackTrace	/usr/include/v8/v8.h	/^  static void PrintCurrentStackTrace(FILE* out);$/;"	p	class:v8::Message	access:public	signature:(FILE* out)
ProfilerModules	/usr/include/v8/v8.h	/^enum ProfilerModules {$/;"	g	namespace:v8
PropertyAttribute	/usr/include/v8/v8.h	/^enum PropertyAttribute {$/;"	g	namespace:v8
PrototypeTemplate	/usr/include/v8/v8.h	/^  Local<ObjectTemplate> PrototypeTemplate();$/;"	p	class:v8::FunctionTemplate	access:public	signature:()
QuickIsString	/usr/include/v8/v8.h	/^  inline bool QuickIsString() const;$/;"	p	class:v8::Value	access:private	signature:() const
QuickIsString	/usr/include/v8/v8.h	/^bool Value::QuickIsString() const {$/;"	f	class:v8::Value	signature:() const
QuickUnwrap	/usr/include/v8/v8.h	/^  static inline void* QuickUnwrap(Handle<v8::Value> obj);$/;"	p	class:v8::External	access:private	signature:(Handle<v8::Value> obj)
QuickUnwrap	/usr/include/v8/v8.h	/^void* External::QuickUnwrap(Handle<v8::Value> wrapper) {$/;"	f	class:v8::External	signature:(Handle<v8::Value> wrapper)
RangeError	/usr/include/v8/v8.h	/^  static Local<Value> RangeError(Handle<String> message);$/;"	p	class:v8::Exception	access:public	signature:(Handle<String> message)
RawClose	/usr/include/v8/v8.h	/^  internal::Object** RawClose(internal::Object** value);$/;"	p	class:v8::HandleScope	access:private	signature:(internal::Object** value)
ReThrow	/usr/include/v8/v8.h	/^  Handle<Value> ReThrow();$/;"	p	class:v8::TryCatch	access:public	signature:()
ReadField	/usr/include/v8/v8.h	/^  static inline T ReadField(Object* ptr, int offset) {$/;"	f	class:v8::internal::Internals	access:public	signature:(Object* ptr, int offset)
ReadOnly	/usr/include/v8/v8.h	/^  ReadOnly   = 1 << 0,$/;"	e	enum:v8::PropertyAttribute
ReferenceError	/usr/include/v8/v8.h	/^  static Local<Value> ReferenceError(Handle<String> message);$/;"	p	class:v8::Exception	access:public	signature:(Handle<String> message)
RegisterExtension	/usr/include/v8/v8.h	/^void V8EXPORT RegisterExtension(Extension* extension);$/;"	p	namespace:v8	signature:(Extension* extension)
RemoveMessageListeners	/usr/include/v8/v8.h	/^  static void RemoveMessageListeners(MessageCallback that);$/;"	p	class:v8::V8	access:public	signature:(MessageCallback that)
Reset	/usr/include/v8/v8.h	/^  void Reset();$/;"	p	class:v8::TryCatch	access:public	signature:()
ResourceColumnOffset	/usr/include/v8/v8.h	/^  inline Handle<Integer> ResourceColumnOffset() const;$/;"	p	class:v8::ScriptOrigin	access:public	signature:() const
ResourceColumnOffset	/usr/include/v8/v8.h	/^Handle<Integer> ScriptOrigin::ResourceColumnOffset() const {$/;"	f	class:v8::ScriptOrigin	signature:() const
ResourceConstraints	/usr/include/v8/v8.h	/^  ResourceConstraints();$/;"	p	class:v8::ResourceConstraints	access:public	signature:()
ResourceConstraints	/usr/include/v8/v8.h	/^class V8EXPORT ResourceConstraints {$/;"	c	namespace:v8
ResourceLineOffset	/usr/include/v8/v8.h	/^  inline Handle<Integer> ResourceLineOffset() const;$/;"	p	class:v8::ScriptOrigin	access:public	signature:() const
ResourceLineOffset	/usr/include/v8/v8.h	/^Handle<Integer> ScriptOrigin::ResourceLineOffset() const {$/;"	f	class:v8::ScriptOrigin	signature:() const
ResourceName	/usr/include/v8/v8.h	/^  inline Handle<Value> ResourceName() const;$/;"	p	class:v8::ScriptOrigin	access:public	signature:() const
ResourceName	/usr/include/v8/v8.h	/^Handle<Value> ScriptOrigin::ResourceName() const {$/;"	f	class:v8::ScriptOrigin	signature:() const
ResumeProfiler	/usr/include/v8/v8.h	/^  static void ResumeProfiler();$/;"	p	class:v8::V8	access:public	signature:()
ResumeProfilerEx	/usr/include/v8/v8.h	/^  static void ResumeProfilerEx(int flags);$/;"	p	class:v8::V8	access:public	signature:(int flags)
Run	/usr/include/v8/v8.h	/^  Local<Value> Run();$/;"	p	class:v8::Script	access:public	signature:()
Scope	/usr/include/v8/v8.h	/^    inline Scope(Handle<Context> context) : context_(context) {$/;"	f	class:v8::Context::Scope	access:public	signature:(Handle<Context> context)
Scope	/usr/include/v8/v8.h	/^  class V8EXPORT Scope {$/;"	c	class:v8::Context	access:public
Script	/usr/include/v8/v8.h	/^class V8EXPORT Script {$/;"	c	namespace:v8
ScriptCollected	/usr/include/v8/v8-debug.h	/^  ScriptCollected = 6$/;"	e	enum:v8::DebugEvent
ScriptData	/usr/include/v8/v8.h	/^class V8EXPORT ScriptData {  \/\/ NOLINT$/;"	c	namespace:v8
ScriptOrigin	/usr/include/v8/v8.h	/^  ScriptOrigin(Handle<Value> resource_name,$/;"	f	class:v8::ScriptOrigin	access:public	signature:(Handle<Value> resource_name, Handle<Integer> resource_line_offset = Handle<Integer>(), Handle<Integer> resource_column_offset = Handle<Integer>())
ScriptOrigin	/usr/include/v8/v8.h	/^class V8EXPORT ScriptOrigin {$/;"	c	namespace:v8
SendCommand	/usr/include/v8/v8-debug.h	/^  static void SendCommand(const uint16_t* command, int length,$/;"	p	class:v8::Debug	access:public	signature:(const uint16_t* command, int length, ClientData* client_data = NULL)
Set	/usr/include/v8/v8.h	/^  bool Set(Handle<Value> key,$/;"	p	class:v8::Object	access:public	signature:(Handle<Value> key, Handle<Value> value, PropertyAttribute attribs = None)
Set	/usr/include/v8/v8.h	/^  inline void Set(const char* name, Handle<Data> value);$/;"	p	class:v8::Template	access:public	signature:(const char* name, Handle<Data> value)
Set	/usr/include/v8/v8.h	/^  void Set(Handle<String> name, Handle<Data> value,$/;"	p	class:v8::Template	access:public	signature:(Handle<String> name, Handle<Data> value, PropertyAttribute attributes = None)
Set	/usr/include/v8/v8.h	/^void Template::Set(const char* name, v8::Handle<Data> value) {$/;"	f	class:v8::Template	signature:(const char* name, v8::Handle<Data> value)
SetAccessCheckCallbacks	/usr/include/v8/v8.h	/^  void SetAccessCheckCallbacks(NamedSecurityCallback named_handler,$/;"	p	class:v8::ObjectTemplate	access:public	signature:(NamedSecurityCallback named_handler, IndexedSecurityCallback indexed_handler, Handle<Value> data = Handle<Value>(), bool turned_on_by_default = true)
SetAccessor	/usr/include/v8/v8.h	/^  void SetAccessor(Handle<String> name,$/;"	p	class:v8::ObjectTemplate	access:public	signature:(Handle<String> name, AccessorGetter getter, AccessorSetter setter = 0, Handle<Value> data = Handle<Value>(), AccessControl settings = DEFAULT, PropertyAttribute attribute = None)
SetAddHistogramSampleFunction	/usr/include/v8/v8.h	/^  static void SetAddHistogramSampleFunction(AddHistogramSampleCallback);$/;"	p	class:v8::V8	access:public	signature:(AddHistogramSampleCallback)
SetCallAsFunctionHandler	/usr/include/v8/v8.h	/^  void SetCallAsFunctionHandler(InvocationCallback callback,$/;"	p	class:v8::ObjectTemplate	access:public	signature:(InvocationCallback callback, Handle<Value> data = Handle<Value>())
SetCallHandler	/usr/include/v8/v8.h	/^  void SetCallHandler(InvocationCallback callback,$/;"	p	class:v8::FunctionTemplate	access:public	signature:(InvocationCallback callback, Handle<Value> data = Handle<Value>())
SetCaptureMessage	/usr/include/v8/v8.h	/^  void SetCaptureMessage(bool value);$/;"	p	class:v8::TryCatch	access:public	signature:(bool value)
SetClassName	/usr/include/v8/v8.h	/^  void SetClassName(Handle<String> name);$/;"	p	class:v8::FunctionTemplate	access:public	signature:(Handle<String> name)
SetCounterFunction	/usr/include/v8/v8.h	/^  static void SetCounterFunction(CounterLookupCallback);$/;"	p	class:v8::V8	access:public	signature:(CounterLookupCallback)
SetCreateHistogramFunction	/usr/include/v8/v8.h	/^  static void SetCreateHistogramFunction(CreateHistogramCallback);$/;"	p	class:v8::V8	access:public	signature:(CreateHistogramCallback)
SetData	/usr/include/v8/v8.h	/^  void SetData(Handle<String> data);$/;"	p	class:v8::Context	access:public	signature:(Handle<String> data)
SetData	/usr/include/v8/v8.h	/^  void SetData(Handle<String> data);$/;"	p	class:v8::Script	access:public	signature:(Handle<String> data)
SetDebugEventListener	/usr/include/v8/v8-debug.h	/^  static bool SetDebugEventListener(EventCallback that,$/;"	p	class:v8::Debug	access:public	signature:(EventCallback that, Handle<Value> data = Handle<Value>())
SetDebugEventListener	/usr/include/v8/v8-debug.h	/^  static bool SetDebugEventListener(v8::Handle<v8::Object> that,$/;"	p	class:v8::Debug	access:public	signature:(v8::Handle<v8::Object> that, Handle<Value> data = Handle<Value>())
SetDebugMessageDispatchHandler	/usr/include/v8/v8-debug.h	/^  static void SetDebugMessageDispatchHandler($/;"	p	class:v8::Debug	access:public	signature:( DebugMessageDispatchHandler handler)
SetFailedAccessCheckCallbackFunction	/usr/include/v8/v8.h	/^  static void SetFailedAccessCheckCallbackFunction(FailedAccessCheckCallback);$/;"	p	class:v8::V8	access:public	signature:(FailedAccessCheckCallback)
SetFatalErrorHandler	/usr/include/v8/v8.h	/^  static void SetFatalErrorHandler(FatalErrorCallback that);$/;"	p	class:v8::V8	access:public	signature:(FatalErrorCallback that)
SetFlagsFromCommandLine	/usr/include/v8/v8.h	/^  static void SetFlagsFromCommandLine(int* argc,$/;"	p	class:v8::V8	access:public	signature:(int* argc, char** argv, bool remove_flags)
SetFlagsFromString	/usr/include/v8/v8.h	/^  static void SetFlagsFromString(const char* str, int length);$/;"	p	class:v8::V8	access:public	signature:(const char* str, int length)
SetGlobalGCEpilogueCallback	/usr/include/v8/v8.h	/^  static void SetGlobalGCEpilogueCallback(GCCallback);$/;"	p	class:v8::V8	access:public	signature:(GCCallback)
SetGlobalGCPrologueCallback	/usr/include/v8/v8.h	/^  static void SetGlobalGCPrologueCallback(GCCallback);$/;"	p	class:v8::V8	access:public	signature:(GCCallback)
SetHiddenPrototype	/usr/include/v8/v8.h	/^  void SetHiddenPrototype(bool value);$/;"	p	class:v8::FunctionTemplate	access:public	signature:(bool value)
SetHiddenValue	/usr/include/v8/v8.h	/^  bool SetHiddenValue(Handle<String> key, Handle<Value> value);$/;"	p	class:v8::Object	access:public	signature:(Handle<String> key, Handle<Value> value)
SetHostDispatchHandler	/usr/include/v8/v8-debug.h	/^  static void SetHostDispatchHandler(HostDispatchHandler handler,$/;"	p	class:v8::Debug	access:public	signature:(HostDispatchHandler handler, int period = 100)
SetIndexedInstancePropertyHandler	/usr/include/v8/v8.h	/^  void SetIndexedInstancePropertyHandler(IndexedPropertyGetter getter,$/;"	p	class:v8::FunctionTemplate	access:private	signature:(IndexedPropertyGetter getter, IndexedPropertySetter setter, IndexedPropertyQuery query, IndexedPropertyDeleter remover, IndexedPropertyEnumerator enumerator, Handle<Value> data)
SetIndexedPropertiesToExternalArrayData	/usr/include/v8/v8.h	/^  void SetIndexedPropertiesToExternalArrayData(void* data,$/;"	p	class:v8::Object	access:public	signature:(void* data, ExternalArrayType array_type, int number_of_elements)
SetIndexedPropertiesToPixelData	/usr/include/v8/v8.h	/^  void SetIndexedPropertiesToPixelData(uint8_t* data, int length);$/;"	p	class:v8::Object	access:public	signature:(uint8_t* data, int length)
SetIndexedPropertyHandler	/usr/include/v8/v8.h	/^  void SetIndexedPropertyHandler(IndexedPropertyGetter getter,$/;"	p	class:v8::ObjectTemplate	access:public	signature:(IndexedPropertyGetter getter, IndexedPropertySetter setter = 0, IndexedPropertyQuery query = 0, IndexedPropertyDeleter deleter = 0, IndexedPropertyEnumerator enumerator = 0, Handle<Value> data = Handle<Value>())
SetInstanceCallAsFunctionHandler	/usr/include/v8/v8.h	/^  void SetInstanceCallAsFunctionHandler(InvocationCallback callback,$/;"	p	class:v8::FunctionTemplate	access:private	signature:(InvocationCallback callback, Handle<Value> data)
SetInternalField	/usr/include/v8/v8.h	/^  void SetInternalField(int index, Handle<Value> value);$/;"	p	class:v8::Object	access:public	signature:(int index, Handle<Value> value)
SetInternalFieldCount	/usr/include/v8/v8.h	/^  void SetInternalFieldCount(int value);$/;"	p	class:v8::ObjectTemplate	access:public	signature:(int value)
SetMessageHandler	/usr/include/v8/v8-debug.h	/^  static void SetMessageHandler(MessageHandler handler,$/;"	p	class:v8::Debug	access:public	signature:(MessageHandler handler, bool message_handler_thread = false)
SetMessageHandler2	/usr/include/v8/v8-debug.h	/^  static void SetMessageHandler2(MessageHandler2 handler);$/;"	p	class:v8::Debug	access:public	signature:(MessageHandler2 handler)
SetName	/usr/include/v8/v8.h	/^  void SetName(Handle<String> name);$/;"	p	class:v8::Function	access:public	signature:(Handle<String> name)
SetNamedInstancePropertyHandler	/usr/include/v8/v8.h	/^  void SetNamedInstancePropertyHandler(NamedPropertyGetter getter,$/;"	p	class:v8::FunctionTemplate	access:private	signature:(NamedPropertyGetter getter, NamedPropertySetter setter, NamedPropertyQuery query, NamedPropertyDeleter remover, NamedPropertyEnumerator enumerator, Handle<Value> data)
SetNamedPropertyHandler	/usr/include/v8/v8.h	/^  void SetNamedPropertyHandler(NamedPropertyGetter getter,$/;"	p	class:v8::ObjectTemplate	access:public	signature:(NamedPropertyGetter getter, NamedPropertySetter setter = 0, NamedPropertyQuery query = 0, NamedPropertyDeleter deleter = 0, NamedPropertyEnumerator enumerator = 0, Handle<Value> data = Handle<Value>())
SetPointerInInternalField	/usr/include/v8/v8.h	/^  void SetPointerInInternalField(int index, void* value);$/;"	p	class:v8::Object	access:public	signature:(int index, void* value)
SetResourceConstraints	/usr/include/v8/v8.h	/^bool SetResourceConstraints(ResourceConstraints* constraints);$/;"	p	namespace:v8	signature:(ResourceConstraints* constraints)
SetSecurityToken	/usr/include/v8/v8.h	/^  void SetSecurityToken(Handle<Value> token);$/;"	p	class:v8::Context	access:public	signature:(Handle<Value> token)
SetVerbose	/usr/include/v8/v8.h	/^  void SetVerbose(bool value);$/;"	p	class:v8::TryCatch	access:public	signature:(bool value)
Signature	/usr/include/v8/v8.h	/^  Signature();$/;"	p	class:v8::Signature	access:private	signature:()
Signature	/usr/include/v8/v8.h	/^class V8EXPORT Signature : public Data {$/;"	c	namespace:v8	inherits:Data
SlowGetPointerFromInternalField	/usr/include/v8/v8.h	/^  void* SlowGetPointerFromInternalField(int index);$/;"	p	class:v8::Object	access:private	signature:(int index)
SmiConstants	/usr/include/v8/v8.h	/^template <> struct SmiConstants<4> {$/;"	s	namespace:v8::internal
SmiConstants	/usr/include/v8/v8.h	/^template <> struct SmiConstants<8> {$/;"	s	namespace:v8::internal
SmiToInt	/usr/include/v8/v8.h	/^  static inline int SmiToInt(internal::Object* value) {$/;"	f	struct:v8::internal::SmiConstants	access:public	signature:(internal::Object* value)
SmiValue	/usr/include/v8/v8.h	/^  static inline int SmiValue(internal::Object* value) {$/;"	f	class:v8::internal::Internals	access:public	signature:(internal::Object* value)
StackTrace	/usr/include/v8/v8.h	/^  Local<Value> StackTrace() const;$/;"	p	class:v8::TryCatch	access:public	signature:() const
StartPreemption	/usr/include/v8/v8.h	/^  static void StartPreemption(int every_n_ms);$/;"	p	class:v8::Locker	access:public	signature:(int every_n_ms)
StopPreemption	/usr/include/v8/v8.h	/^  static void StopPreemption();$/;"	p	class:v8::Locker	access:public	signature:()
StrictEquals	/usr/include/v8/v8.h	/^  bool StrictEquals(Handle<Value> that) const;$/;"	p	class:v8::Value	access:public	signature:(Handle<Value> that) const
String	/usr/include/v8/v8.h	/^class V8EXPORT String : public Primitive {$/;"	c	namespace:v8	inherits:Primitive
SyntaxError	/usr/include/v8/v8.h	/^  static Local<Value> SyntaxError(Handle<String> message);$/;"	p	class:v8::Exception	access:public	signature:(Handle<String> message)
TYPE_CHECK	/usr/include/v8/v8.h	154;"	d
TYPE_CHECK	/usr/include/v8/v8.h	3233;"	d
Template	/usr/include/v8/v8.h	/^  Template();$/;"	p	class:v8::Template	access:private	signature:()
Template	/usr/include/v8/v8.h	/^class V8EXPORT Template : public Data {$/;"	c	namespace:v8	inherits:Data
TerminateExecution	/usr/include/v8/v8.h	/^  static void TerminateExecution();$/;"	p	class:v8::V8	access:public	signature:()
TerminateExecution	/usr/include/v8/v8.h	/^  static void TerminateExecution(int thread_id);$/;"	p	class:v8::V8	access:public	signature:(int thread_id)
This	/usr/include/v8/v8.h	/^  inline Local<Object> This() const;$/;"	p	class:v8::AccessorInfo	access:public	signature:() const
This	/usr/include/v8/v8.h	/^  inline Local<Object> This() const;$/;"	p	class:v8::Arguments	access:public	signature:() const
This	/usr/include/v8/v8.h	/^Local<Object> AccessorInfo::This() const {$/;"	f	class:v8::AccessorInfo	signature:() const
This	/usr/include/v8/v8.h	/^Local<Object> Arguments::This() const {$/;"	f	class:v8::Arguments	signature:() const
ThrowException	/usr/include/v8/v8.h	/^Handle<Value> V8EXPORT ThrowException(Handle<Value> exception);$/;"	p	namespace:v8	signature:(Handle<Value> exception)
ToArrayIndex	/usr/include/v8/v8.h	/^  Local<Uint32> ToArrayIndex() const;$/;"	p	class:v8::Value	access:public	signature:() const
ToBoolean	/usr/include/v8/v8.h	/^  Local<Boolean> ToBoolean() const;$/;"	p	class:v8::Value	access:public	signature:() const
ToDetailString	/usr/include/v8/v8.h	/^  Local<String> ToDetailString() const;$/;"	p	class:v8::Value	access:public	signature:() const
ToInt32	/usr/include/v8/v8.h	/^  Local<Int32> ToInt32() const;$/;"	p	class:v8::Value	access:public	signature:() const
ToInteger	/usr/include/v8/v8.h	/^  Local<Integer> ToInteger() const;$/;"	p	class:v8::Value	access:public	signature:() const
ToNumber	/usr/include/v8/v8.h	/^  Local<Number> ToNumber() const;$/;"	p	class:v8::Value	access:public	signature:() const
ToObject	/usr/include/v8/v8.h	/^  Local<Object> ToObject() const;$/;"	p	class:v8::Value	access:public	signature:() const
ToString	/usr/include/v8/v8.h	/^  Local<String> ToString() const;$/;"	p	class:v8::Value	access:public	signature:() const
ToUint32	/usr/include/v8/v8.h	/^  Local<Uint32> ToUint32() const;$/;"	p	class:v8::Value	access:public	signature:() const
True	/usr/include/v8/v8.h	/^Handle<Boolean> V8EXPORT True();$/;"	p	namespace:v8	signature:()
TryCatch	/usr/include/v8/v8.h	/^  TryCatch();$/;"	p	class:v8::TryCatch	access:public	signature:()
TryCatch	/usr/include/v8/v8.h	/^class V8EXPORT TryCatch {$/;"	c	namespace:v8
TurnOnAccessCheck	/usr/include/v8/v8.h	/^  void TurnOnAccessCheck();$/;"	p	class:v8::Object	access:public	signature:()
TypeError	/usr/include/v8/v8.h	/^  static Local<Value> TypeError(Handle<String> message);$/;"	p	class:v8::Exception	access:public	signature:(Handle<String> message)
TypeSwitch	/usr/include/v8/v8.h	/^  TypeSwitch();$/;"	p	class:v8::TypeSwitch	access:private	signature:()
TypeSwitch	/usr/include/v8/v8.h	/^class V8EXPORT TypeSwitch : public Data {$/;"	c	namespace:v8	inherits:Data
Uint32	/usr/include/v8/v8.h	/^  Uint32();$/;"	p	class:v8::Uint32	access:private	signature:()
Uint32	/usr/include/v8/v8.h	/^class V8EXPORT Uint32 : public Integer {$/;"	c	namespace:v8	inherits:Integer
Uint32Value	/usr/include/v8/v8.h	/^  uint32_t Uint32Value() const;$/;"	p	class:v8::Value	access:public	signature:() const
UncheckedGetInternalField	/usr/include/v8/v8.h	/^  inline Local<Value> UncheckedGetInternalField(int index);$/;"	p	class:v8::Object	access:private	signature:(int index)
UncheckedGetInternalField	/usr/include/v8/v8.h	/^Local<Value> Object::UncheckedGetInternalField(int index) {$/;"	f	class:v8::Object	signature:(int index)
Undefined	/usr/include/v8/v8.h	/^Handle<Primitive> V8EXPORT Undefined();$/;"	p	namespace:v8	signature:()
Unlocker	/usr/include/v8/v8.h	/^  Unlocker();$/;"	p	class:v8::Unlocker	access:public	signature:()
Unlocker	/usr/include/v8/v8.h	/^class V8EXPORT Unlocker {$/;"	c	namespace:v8
Unwrap	/usr/include/v8/v8.h	/^  static inline void* Unwrap(Handle<Value> obj);$/;"	p	class:v8::External	access:public	signature:(Handle<Value> obj)
Unwrap	/usr/include/v8/v8.h	/^void* External::Unwrap(Handle<v8::Value> obj) {$/;"	f	class:v8::External	signature:(Handle<v8::Value> obj)
UseDefaultSecurityToken	/usr/include/v8/v8.h	/^  void UseDefaultSecurityToken();$/;"	p	class:v8::Context	access:public	signature:()
Utf8Length	/usr/include/v8/v8.h	/^  int Utf8Length() const;$/;"	p	class:v8::String	access:public	signature:() const
Utf8Value	/usr/include/v8/v8.h	/^    Utf8Value(const Utf8Value&);$/;"	p	class:v8::String::Utf8Value	access:private	signature:(const Utf8Value&)
Utf8Value	/usr/include/v8/v8.h	/^    explicit Utf8Value(Handle<v8::Value> obj);$/;"	p	class:v8::String::Utf8Value	access:public	signature:(Handle<v8::Value> obj)
Utf8Value	/usr/include/v8/v8.h	/^  class V8EXPORT Utf8Value {$/;"	c	class:v8::String	access:public
V8	/usr/include/v8/v8.h	/^  V8();$/;"	p	class:v8::V8	access:private	signature:()
V8	/usr/include/v8/v8.h	/^class V8EXPORT V8 {$/;"	c	namespace:v8
V8EXPORT	/usr/include/v8/v8.h	3231;"	d
V8EXPORT	/usr/include/v8/v8.h	74;"	d
V8EXPORT	/usr/include/v8/v8.h	77;"	d
V8EXPORT	/usr/include/v8/v8.h	80;"	d
V8EXPORT	/usr/include/v8/v8.h	92;"	d
V8EXPORT	/usr/include/v8/v8.h	95;"	d
V8EXPORT_INLINE	/usr/include/v8/v8.h	3232;"	d
V8EXPORT_INLINE	/usr/include/v8/v8.h	75;"	d
V8EXPORT_INLINE	/usr/include/v8/v8.h	78;"	d
V8EXPORT_INLINE	/usr/include/v8/v8.h	81;"	d
V8EXPORT_INLINE	/usr/include/v8/v8.h	93;"	d
V8EXPORT_INLINE	/usr/include/v8/v8.h	96;"	d
V8_H_	/usr/include/v8/v8.h	39;"	d
V8_V8_DEBUG_H_	/usr/include/v8/v8-debug.h	29;"	d
Value	/usr/include/v8/v8.h	/^    Value(const Value&);$/;"	p	class:v8::String::Value	access:private	signature:(const Value&)
Value	/usr/include/v8/v8.h	/^    explicit Value(Handle<v8::Value> obj);$/;"	p	class:v8::String::Value	access:public	signature:(Handle<v8::Value> obj)
Value	/usr/include/v8/v8.h	/^  bool Value() const;$/;"	p	class:v8::Boolean	access:public	signature:() const
Value	/usr/include/v8/v8.h	/^  class V8EXPORT Value {$/;"	c	class:v8::String	access:public
Value	/usr/include/v8/v8.h	/^  double Value() const;$/;"	p	class:v8::Number	access:public	signature:() const
Value	/usr/include/v8/v8.h	/^  int32_t Value() const;$/;"	p	class:v8::Int32	access:public	signature:() const
Value	/usr/include/v8/v8.h	/^  int64_t Value() const;$/;"	p	class:v8::Integer	access:public	signature:() const
Value	/usr/include/v8/v8.h	/^  uint32_t Value() const;$/;"	p	class:v8::Uint32	access:public	signature:() const
Value	/usr/include/v8/v8.h	/^  void* Value() const;$/;"	p	class:v8::External	access:public	signature:() const
Value	/usr/include/v8/v8.h	/^class V8EXPORT Value : public Data {$/;"	c	namespace:v8	inherits:Data
VerifyExternalStringResource	/usr/include/v8/v8.h	/^  void VerifyExternalStringResource(ExternalStringResource* val) const;$/;"	p	class:v8::String	access:private	signature:(ExternalStringResource* val) const
WeakReferenceCallback	/usr/include/v8/v8.h	/^typedef void (*WeakReferenceCallback)(Persistent<Value> object,$/;"	t	namespace:v8
WillStartRunning	/usr/include/v8/v8-debug.h	/^    virtual bool WillStartRunning() const = 0;$/;"	p	class:v8::Debug::Message	access:public	signature:() const
Wrap	/usr/include/v8/v8.h	/^  static Local<Value> Wrap(void* data);$/;"	p	class:v8::External	access:public	signature:(void* data)
Write	/usr/include/v8/v8.h	/^  int Write(uint16_t* buffer, int start = 0, int length = -1) const;  \/\/ UTF-16$/;"	p	class:v8::String	access:public	signature:(uint16_t* buffer, int start = 0, int length = -1) const
WriteAscii	/usr/include/v8/v8.h	/^  int WriteAscii(char* buffer, int start = 0, int length = -1) const;  \/\/ ASCII$/;"	p	class:v8::String	access:public	signature:(char* buffer, int start = 0, int length = -1) const
WriteUtf8	/usr/include/v8/v8.h	/^  int WriteUtf8(char* buffer, int length = -1) const; \/\/ UTF-8$/;"	p	class:v8::String	access:public	signature:(char* buffer, int length = -1) const
active_	/usr/include/v8/v8.h	/^  static bool active_;$/;"	m	class:v8::Locker	access:private
args_	/usr/include/v8/v8.h	/^  internal::Object** args_;$/;"	m	class:v8::AccessorInfo	access:private
auto_enable	/usr/include/v8/v8.h	/^  bool auto_enable() { return auto_enable_; }$/;"	f	class:v8::Extension	access:public	signature:()
auto_enable_	/usr/include/v8/v8.h	/^  bool auto_enable_;$/;"	m	class:v8::Extension	access:private
callee_	/usr/include/v8/v8.h	/^  Local<Function> callee_;$/;"	m	class:v8::Arguments	access:private
context_	/usr/include/v8/v8.h	/^    Handle<Context> context_;$/;"	m	class:v8::Context::Scope	access:private
data	/usr/include/v8/v8.h	/^    virtual const char* data() const = 0;$/;"	p	class:v8::String::ExternalAsciiStringResource	access:public	signature:() const
data	/usr/include/v8/v8.h	/^    virtual const uint16_t* data() const = 0;$/;"	p	class:v8::String::ExternalStringResource	access:public	signature:() const
data_	/usr/include/v8/v8.h	/^  Local<Value> data_;$/;"	m	class:v8::Arguments	access:private
dep_count_	/usr/include/v8/v8.h	/^  int dep_count_;$/;"	m	class:v8::Extension	access:private
dependencies	/usr/include/v8/v8.h	/^  const char** dependencies() { return deps_; }$/;"	f	class:v8::Extension	access:public	signature:()
dependency_count	/usr/include/v8/v8.h	/^  int dependency_count() { return dep_count_; }$/;"	f	class:v8::Extension	access:public	signature:()
deps_	/usr/include/v8/v8.h	/^  const char** deps_;$/;"	m	class:v8::Extension	access:private
exception_	/usr/include/v8/v8.h	/^  void* exception_;$/;"	m	class:v8::TryCatch	access:private
extensions	/usr/include/v8/v8.h	/^    int extensions;$/;"	m	class:v8::HandleScope::Data	access:public
has_lock_	/usr/include/v8/v8.h	/^  bool has_lock_;$/;"	m	class:v8::Locker	access:private
holder_	/usr/include/v8/v8.h	/^  Local<Object> holder_;$/;"	m	class:v8::Arguments	access:private
int16_t	/usr/include/v8/v8.h	/^typedef short int16_t;  \/\/ NOLINT$/;"	t
int32_t	/usr/include/v8/v8-debug.h	/^typedef int int32_t;$/;"	t
int32_t	/usr/include/v8/v8.h	/^typedef int int32_t;$/;"	t
int64_t	/usr/include/v8/v8-debug.h	/^typedef long long int64_t;  \/\/ NOLINT$/;"	t
int64_t	/usr/include/v8/v8.h	/^typedef __int64 int64_t;$/;"	t
int8_t	/usr/include/v8/v8.h	/^typedef signed char int8_t;$/;"	t
internal	/usr/include/v8/v8.h	/^namespace internal {$/;"	n	namespace:v8
is_closed_	/usr/include/v8/v8.h	/^  bool is_closed_;$/;"	m	class:v8::HandleScope	access:private
is_construct_call_	/usr/include/v8/v8.h	/^  bool is_construct_call_;$/;"	m	class:v8::Arguments	access:private
kExternalByteArray	/usr/include/v8/v8.h	/^  kExternalByteArray = 1,$/;"	e	enum:v8::ExternalArrayType
kExternalFloatArray	/usr/include/v8/v8.h	/^  kExternalFloatArray$/;"	e	enum:v8::ExternalArrayType
kExternalIntArray	/usr/include/v8/v8.h	/^  kExternalIntArray,$/;"	e	enum:v8::ExternalArrayType
kExternalShortArray	/usr/include/v8/v8.h	/^  kExternalShortArray,$/;"	e	enum:v8::ExternalArrayType
kExternalTwoByteRepresentationTag	/usr/include/v8/v8.h	/^  static const int kExternalTwoByteRepresentationTag = 0x03;$/;"	m	class:v8::internal::Internals	access:public
kExternalUnsignedByteArray	/usr/include/v8/v8.h	/^  kExternalUnsignedByteArray,$/;"	e	enum:v8::ExternalArrayType
kExternalUnsignedIntArray	/usr/include/v8/v8.h	/^  kExternalUnsignedIntArray,$/;"	e	enum:v8::ExternalArrayType
kExternalUnsignedShortArray	/usr/include/v8/v8.h	/^  kExternalUnsignedShortArray,$/;"	e	enum:v8::ExternalArrayType
kFirstNonstringType	/usr/include/v8/v8.h	/^  V8EXPORT static int kFirstNonstringType;$/;"	m	class:v8::internal::Internals	access:public
kFullStringRepresentationMask	/usr/include/v8/v8.h	/^  static const int kFullStringRepresentationMask = 0x07;$/;"	m	class:v8::internal::Internals	access:public
kHeapObjectMapOffset	/usr/include/v8/v8.h	/^  static const int kHeapObjectMapOffset = 0;$/;"	m	class:v8::internal::Internals	access:public
kHeapObjectTag	/usr/include/v8/v8.h	/^const int kHeapObjectTag = 1;$/;"	m	namespace:v8::internal
kHeapObjectTagMask	/usr/include/v8/v8.h	/^const intptr_t kHeapObjectTagMask = (1 << kHeapObjectTagSize) - 1;$/;"	m	namespace:v8::internal
kHeapObjectTagSize	/usr/include/v8/v8.h	/^const int kHeapObjectTagSize = 2;$/;"	m	namespace:v8::internal
kJSObjectHeaderSize	/usr/include/v8/v8.h	/^  static const int kJSObjectHeaderSize = 3 * sizeof(void*);$/;"	m	class:v8::internal::Internals	access:public
kJSObjectType	/usr/include/v8/v8.h	/^  V8EXPORT static int kJSObjectType;$/;"	m	class:v8::internal::Internals	access:public
kMapInstanceTypeOffset	/usr/include/v8/v8.h	/^  static const int kMapInstanceTypeOffset = sizeof(void*) + sizeof(int);$/;"	m	class:v8::internal::Internals	access:public
kProxyProxyOffset	/usr/include/v8/v8.h	/^  static const int kProxyProxyOffset = sizeof(void*);$/;"	m	class:v8::internal::Internals	access:public
kProxyType	/usr/include/v8/v8.h	/^  V8EXPORT static int kProxyType;$/;"	m	class:v8::internal::Internals	access:public
kSmiShiftSize	/usr/include/v8/v8.h	/^  static const int kSmiShiftSize = 0;$/;"	m	struct:v8::internal::SmiConstants	access:public
kSmiShiftSize	/usr/include/v8/v8.h	/^  static const int kSmiShiftSize = 31;$/;"	m	struct:v8::internal::SmiConstants	access:public
kSmiShiftSize	/usr/include/v8/v8.h	/^const int kSmiShiftSize = SmiConstants<sizeof(void*)>::kSmiShiftSize;$/;"	m	namespace:v8::internal
kSmiTag	/usr/include/v8/v8.h	/^const int kSmiTag = 0;$/;"	m	namespace:v8::internal
kSmiTagMask	/usr/include/v8/v8.h	/^const intptr_t kSmiTagMask = (1 << kSmiTagSize) - 1;$/;"	m	namespace:v8::internal
kSmiTagSize	/usr/include/v8/v8.h	/^const int kSmiTagSize = 1;$/;"	m	namespace:v8::internal
kSmiValueSize	/usr/include/v8/v8.h	/^  static const int kSmiValueSize = 31;$/;"	m	struct:v8::internal::SmiConstants	access:public
kSmiValueSize	/usr/include/v8/v8.h	/^  static const int kSmiValueSize = 32;$/;"	m	struct:v8::internal::SmiConstants	access:public
kSmiValueSize	/usr/include/v8/v8.h	/^const int kSmiValueSize = SmiConstants<sizeof(void*)>::kSmiValueSize;$/;"	m	namespace:v8::internal
kStringResourceOffset	/usr/include/v8/v8.h	/^  static const int kStringResourceOffset = 2 * sizeof(void*);$/;"	m	struct:v8::internal::InternalConstants	access:public
kStringResourceOffset	/usr/include/v8/v8.h	/^  static const int kStringResourceOffset = 3 * sizeof(void*);$/;"	m	struct:v8::internal::InternalConstants	access:public
kStringResourceOffset	/usr/include/v8/v8.h	/^  static const int kStringResourceOffset =$/;"	m	class:v8::internal::Internals	access:public
length	/usr/include/v8/v8.h	/^    int length() const { return length_; }$/;"	f	class:v8::String::AsciiValue	access:public	signature:() const
length	/usr/include/v8/v8.h	/^    int length() const { return length_; }$/;"	f	class:v8::String::Utf8Value	access:public	signature:() const
length	/usr/include/v8/v8.h	/^    int length() const { return length_; }$/;"	f	class:v8::String::Value	access:public	signature:() const
length	/usr/include/v8/v8.h	/^    virtual size_t length() const = 0;$/;"	p	class:v8::String::ExternalAsciiStringResource	access:public	signature:() const
length	/usr/include/v8/v8.h	/^    virtual size_t length() const = 0;$/;"	p	class:v8::String::ExternalStringResource	access:public	signature:() const
length_	/usr/include/v8/v8.h	/^    int length_;$/;"	m	class:v8::String::AsciiValue	access:private
length_	/usr/include/v8/v8.h	/^    int length_;$/;"	m	class:v8::String::Utf8Value	access:private
length_	/usr/include/v8/v8.h	/^    int length_;$/;"	m	class:v8::String::Value	access:private
length_	/usr/include/v8/v8.h	/^  int length_;$/;"	m	class:v8::Arguments	access:private
limit	/usr/include/v8/v8.h	/^    internal::Object** limit;$/;"	m	class:v8::HandleScope::Data	access:public
match	/usr/include/v8/v8.h	/^  int match(Handle<Value> value);$/;"	p	class:v8::TypeSwitch	access:public	signature:(Handle<Value> value)
max_old_space_size	/usr/include/v8/v8.h	/^  int max_old_space_size() const { return max_old_space_size_; }$/;"	f	class:v8::ResourceConstraints	access:public	signature:() const
max_old_space_size_	/usr/include/v8/v8.h	/^  int max_old_space_size_;$/;"	m	class:v8::ResourceConstraints	access:private
max_young_space_size	/usr/include/v8/v8.h	/^  int max_young_space_size() const { return max_young_space_size_; }$/;"	f	class:v8::ResourceConstraints	access:public	signature:() const
max_young_space_size_	/usr/include/v8/v8.h	/^  int max_young_space_size_;$/;"	m	class:v8::ResourceConstraints	access:private
message_	/usr/include/v8/v8.h	/^  void* message_;$/;"	m	class:v8::TryCatch	access:private
name	/usr/include/v8/v8.h	/^  const char* name() { return name_; }$/;"	f	class:v8::Extension	access:public	signature:()
name_	/usr/include/v8/v8.h	/^  const char* name_;$/;"	m	class:v8::Extension	access:private
name_count_	/usr/include/v8/v8.h	/^  int name_count_;$/;"	m	class:v8::ExtensionConfiguration	access:private
names_	/usr/include/v8/v8.h	/^  const char** names_;$/;"	m	class:v8::ExtensionConfiguration	access:private
next	/usr/include/v8/v8.h	/^    internal::Object** next;$/;"	m	class:v8::HandleScope::Data	access:public
next_	/usr/include/v8/v8.h	/^  void* next_;$/;"	m	class:v8::TryCatch	access:private
operator !=	/usr/include/v8/v8.h	/^  template <class S> bool operator!=(Handle<S> that) const {$/;"	f	class:v8::Handle	access:public	signature:(Handle<S> that) const
operator *	/usr/include/v8/v8.h	/^    char* operator*() { return str_; }$/;"	f	class:v8::String::AsciiValue	access:public	signature:()
operator *	/usr/include/v8/v8.h	/^    char* operator*() { return str_; }$/;"	f	class:v8::String::Utf8Value	access:public	signature:()
operator *	/usr/include/v8/v8.h	/^    const char* operator*() const { return str_; }$/;"	f	class:v8::String::AsciiValue	access:public	signature:() const
operator *	/usr/include/v8/v8.h	/^    const char* operator*() const { return str_; }$/;"	f	class:v8::String::Utf8Value	access:public	signature:() const
operator *	/usr/include/v8/v8.h	/^    const uint16_t* operator*() const { return str_; }$/;"	f	class:v8::String::Value	access:public	signature:() const
operator *	/usr/include/v8/v8.h	/^    uint16_t* operator*() { return str_; }$/;"	f	class:v8::String::Value	access:public	signature:()
operator *	/usr/include/v8/v8.h	/^  T* operator*() const { return val_; }$/;"	f	class:v8::Handle	access:public	signature:() const
operator ->	/usr/include/v8/v8.h	/^  T* operator->() const { return val_; }$/;"	f	class:v8::Handle	access:public	signature:() const
operator =	/usr/include/v8/v8.h	/^    void operator=(const AsciiValue&);$/;"	p	class:v8::String::AsciiValue	access:private	signature:(const AsciiValue&)
operator =	/usr/include/v8/v8.h	/^    void operator=(const ExternalStringResourceBase&);$/;"	p	class:v8::String::ExternalStringResourceBase	access:private	signature:(const ExternalStringResourceBase&)
operator =	/usr/include/v8/v8.h	/^    void operator=(const Utf8Value&);$/;"	p	class:v8::String::Utf8Value	access:private	signature:(const Utf8Value&)
operator =	/usr/include/v8/v8.h	/^    void operator=(const Value&);$/;"	p	class:v8::String::Value	access:private	signature:(const Value&)
operator =	/usr/include/v8/v8.h	/^  void operator=(const Extension&);$/;"	p	class:v8::Extension	access:private	signature:(const Extension&)
operator =	/usr/include/v8/v8.h	/^  void operator=(const HandleScope&);$/;"	p	class:v8::HandleScope	access:private	signature:(const HandleScope&)
operator =	/usr/include/v8/v8.h	/^  void operator=(const Locker&);$/;"	p	class:v8::Locker	access:private	signature:(const Locker&)
operator ==	/usr/include/v8/v8.h	/^  template <class S> bool operator==(Handle<S> that) const {$/;"	f	class:v8::Handle	access:public	signature:(Handle<S> that) const
operator []	/usr/include/v8/v8.h	/^  inline Local<Value> operator[](int i) const;$/;"	p	class:v8::Arguments	access:public	signature:(int i) const
operator []	/usr/include/v8/v8.h	/^Local<Value> Arguments::operator[](int i) const {$/;"	f	class:v8::Arguments	signature:(int i) const
operator delete	/usr/include/v8/v8.h	/^  void operator delete(void*, size_t);$/;"	p	class:v8::HandleScope	access:private	signature:(void*, size_t)
operator new	/usr/include/v8/v8.h	/^  void* operator new(size_t size);$/;"	p	class:v8::HandleScope	access:private	signature:(size_t size)
previous_	/usr/include/v8/v8.h	/^  Data previous_;$/;"	m	class:v8::HandleScope	access:private
resource_column_offset_	/usr/include/v8/v8.h	/^  Handle<Integer> resource_column_offset_;$/;"	m	class:v8::ScriptOrigin	access:private
resource_line_offset_	/usr/include/v8/v8.h	/^  Handle<Integer> resource_line_offset_;$/;"	m	class:v8::ScriptOrigin	access:private
resource_name_	/usr/include/v8/v8.h	/^  Handle<Value> resource_name_;$/;"	m	class:v8::ScriptOrigin	access:private
set_auto_enable	/usr/include/v8/v8.h	/^  void set_auto_enable(bool value) { auto_enable_ = value; }$/;"	f	class:v8::Extension	access:public	signature:(bool value)
set_max_old_space_size	/usr/include/v8/v8.h	/^  void set_max_old_space_size(int value) { max_old_space_size_ = value; }$/;"	f	class:v8::ResourceConstraints	access:public	signature:(int value)
set_max_young_space_size	/usr/include/v8/v8.h	/^  void set_max_young_space_size(int value) { max_young_space_size_ = value; }$/;"	f	class:v8::ResourceConstraints	access:public	signature:(int value)
set_stack_limit	/usr/include/v8/v8.h	/^  void set_stack_limit(uint32_t* value) { stack_limit_ = value; }$/;"	f	class:v8::ResourceConstraints	access:public	signature:(uint32_t* value)
set_total_heap_size	/usr/include/v8/v8.h	/^  void set_total_heap_size(size_t size) { total_heap_size_ = size; }$/;"	f	class:v8::HeapStatistics	access:private	signature:(size_t size)
set_used_heap_size	/usr/include/v8/v8.h	/^  void set_used_heap_size(size_t size) { used_heap_size_ = size; }$/;"	f	class:v8::HeapStatistics	access:private	signature:(size_t size)
source	/usr/include/v8/v8.h	/^  const char* source() { return source_; }$/;"	f	class:v8::Extension	access:public	signature:()
source_	/usr/include/v8/v8.h	/^  const char* source_;$/;"	m	class:v8::Extension	access:private
stack_limit	/usr/include/v8/v8.h	/^  uint32_t* stack_limit() const { return stack_limit_; }$/;"	f	class:v8::ResourceConstraints	access:public	signature:() const
stack_limit_	/usr/include/v8/v8.h	/^  uint32_t* stack_limit_;$/;"	m	class:v8::ResourceConstraints	access:private
str_	/usr/include/v8/v8.h	/^    char* str_;$/;"	m	class:v8::String::AsciiValue	access:private
str_	/usr/include/v8/v8.h	/^    char* str_;$/;"	m	class:v8::String::Utf8Value	access:private
str_	/usr/include/v8/v8.h	/^    uint16_t* str_;$/;"	m	class:v8::String::Value	access:private
top_level_	/usr/include/v8/v8.h	/^  bool top_level_;$/;"	m	class:v8::Locker	access:private
total_heap_size	/usr/include/v8/v8.h	/^  size_t total_heap_size() { return total_heap_size_; }$/;"	f	class:v8::HeapStatistics	access:public	signature:()
total_heap_size_	/usr/include/v8/v8.h	/^  size_t total_heap_size_;$/;"	m	class:v8::HeapStatistics	access:private
uint16_t	/usr/include/v8/v8-debug.h	/^typedef unsigned short uint16_t;  \/\/ NOLINT$/;"	t
uint16_t	/usr/include/v8/v8.h	/^typedef unsigned short uint16_t;  \/\/ NOLINT$/;"	t
uint32_t	/usr/include/v8/v8-debug.h	/^typedef unsigned int uint32_t;$/;"	t
uint32_t	/usr/include/v8/v8.h	/^typedef unsigned int uint32_t;$/;"	t
uint64_t	/usr/include/v8/v8.h	/^typedef unsigned __int64 uint64_t;$/;"	t
uint8_t	/usr/include/v8/v8.h	/^typedef unsigned char uint8_t;$/;"	t
used_heap_size	/usr/include/v8/v8.h	/^  size_t used_heap_size() { return used_heap_size_; }$/;"	f	class:v8::HeapStatistics	access:public	signature:()
used_heap_size_	/usr/include/v8/v8.h	/^  size_t used_heap_size_;$/;"	m	class:v8::HeapStatistics	access:private
v8	/usr/include/v8/v8-debug.h	/^namespace v8 {$/;"	n
v8	/usr/include/v8/v8.h	/^namespace v8 {$/;"	n
v8::ACCESS_DELETE	/usr/include/v8/v8.h	/^  ACCESS_DELETE,$/;"	e	enum:v8::AccessType
v8::ACCESS_GET	/usr/include/v8/v8.h	/^  ACCESS_GET,$/;"	e	enum:v8::AccessType
v8::ACCESS_HAS	/usr/include/v8/v8.h	/^  ACCESS_HAS,$/;"	e	enum:v8::AccessType
v8::ACCESS_KEYS	/usr/include/v8/v8.h	/^  ACCESS_KEYS$/;"	e	enum:v8::AccessType
v8::ACCESS_SET	/usr/include/v8/v8.h	/^  ACCESS_SET,$/;"	e	enum:v8::AccessType
v8::ALL_CAN_READ	/usr/include/v8/v8.h	/^  ALL_CAN_READ          = 1,$/;"	e	enum:v8::AccessControl
v8::ALL_CAN_WRITE	/usr/include/v8/v8.h	/^  ALL_CAN_WRITE         = 1 << 1,$/;"	e	enum:v8::AccessControl
v8::AccessControl	/usr/include/v8/v8.h	/^enum AccessControl {$/;"	g	namespace:v8
v8::AccessType	/usr/include/v8/v8.h	/^enum AccessType {$/;"	g	namespace:v8
v8::AccessorGetter	/usr/include/v8/v8.h	/^typedef Handle<Value> (*AccessorGetter)(Local<String> property,$/;"	t	namespace:v8
v8::AccessorInfo	/usr/include/v8/v8.h	/^class V8EXPORT AccessorInfo {$/;"	c	namespace:v8
v8::AccessorInfo::AccessorInfo	/usr/include/v8/v8.h	/^  inline AccessorInfo(internal::Object** args)$/;"	f	class:v8::AccessorInfo	access:public	signature:(internal::Object** args)
v8::AccessorInfo::Data	/usr/include/v8/v8.h	/^  inline Local<Value> Data() const;$/;"	p	class:v8::AccessorInfo	access:public	signature:() const
v8::AccessorInfo::Data	/usr/include/v8/v8.h	/^Local<Value> AccessorInfo::Data() const {$/;"	f	class:v8::AccessorInfo	signature:() const
v8::AccessorInfo::Holder	/usr/include/v8/v8.h	/^  inline Local<Object> Holder() const;$/;"	p	class:v8::AccessorInfo	access:public	signature:() const
v8::AccessorInfo::Holder	/usr/include/v8/v8.h	/^Local<Object> AccessorInfo::Holder() const {$/;"	f	class:v8::AccessorInfo	signature:() const
v8::AccessorInfo::This	/usr/include/v8/v8.h	/^  inline Local<Object> This() const;$/;"	p	class:v8::AccessorInfo	access:public	signature:() const
v8::AccessorInfo::This	/usr/include/v8/v8.h	/^Local<Object> AccessorInfo::This() const {$/;"	f	class:v8::AccessorInfo	signature:() const
v8::AccessorInfo::args_	/usr/include/v8/v8.h	/^  internal::Object** args_;$/;"	m	class:v8::AccessorInfo	access:private
v8::AccessorSetter	/usr/include/v8/v8.h	/^typedef void (*AccessorSetter)(Local<String> property,$/;"	t	namespace:v8
v8::AddHistogramSampleCallback	/usr/include/v8/v8.h	/^typedef void (*AddHistogramSampleCallback)(void* histogram, int sample);$/;"	t	namespace:v8
v8::AfterCompile	/usr/include/v8/v8-debug.h	/^  AfterCompile  = 5,$/;"	e	enum:v8::DebugEvent
v8::Arguments	/usr/include/v8/v8.h	/^class V8EXPORT Arguments {$/;"	c	namespace:v8
v8::Arguments::Arguments	/usr/include/v8/v8.h	/^  Arguments();$/;"	p	class:v8::Arguments	access:private	signature:()
v8::Arguments::Arguments	/usr/include/v8/v8.h	/^  inline Arguments(Local<Value> data,$/;"	p	class:v8::Arguments	access:private	signature:(Local<Value> data, Local<Object> holder, Local<Function> callee, bool is_construct_call, void** values, int length)
v8::Arguments::Callee	/usr/include/v8/v8.h	/^  inline Local<Function> Callee() const;$/;"	p	class:v8::Arguments	access:public	signature:() const
v8::Arguments::Callee	/usr/include/v8/v8.h	/^Local<Function> Arguments::Callee() const {$/;"	f	class:v8::Arguments	signature:() const
v8::Arguments::Data	/usr/include/v8/v8.h	/^  inline Local<Value> Data() const;$/;"	p	class:v8::Arguments	access:public	signature:() const
v8::Arguments::Data	/usr/include/v8/v8.h	/^Local<Value> Arguments::Data() const {$/;"	f	class:v8::Arguments	signature:() const
v8::Arguments::Holder	/usr/include/v8/v8.h	/^  inline Local<Object> Holder() const;$/;"	p	class:v8::Arguments	access:public	signature:() const
v8::Arguments::Holder	/usr/include/v8/v8.h	/^Local<Object> Arguments::Holder() const {$/;"	f	class:v8::Arguments	signature:() const
v8::Arguments::IsConstructCall	/usr/include/v8/v8.h	/^  inline bool IsConstructCall() const;$/;"	p	class:v8::Arguments	access:public	signature:() const
v8::Arguments::IsConstructCall	/usr/include/v8/v8.h	/^bool Arguments::IsConstructCall() const {$/;"	f	class:v8::Arguments	signature:() const
v8::Arguments::Length	/usr/include/v8/v8.h	/^  inline int Length() const;$/;"	p	class:v8::Arguments	access:public	signature:() const
v8::Arguments::Length	/usr/include/v8/v8.h	/^int Arguments::Length() const {$/;"	f	class:v8::Arguments	signature:() const
v8::Arguments::This	/usr/include/v8/v8.h	/^  inline Local<Object> This() const;$/;"	p	class:v8::Arguments	access:public	signature:() const
v8::Arguments::This	/usr/include/v8/v8.h	/^Local<Object> Arguments::This() const {$/;"	f	class:v8::Arguments	signature:() const
v8::Arguments::callee_	/usr/include/v8/v8.h	/^  Local<Function> callee_;$/;"	m	class:v8::Arguments	access:private
v8::Arguments::data_	/usr/include/v8/v8.h	/^  Local<Value> data_;$/;"	m	class:v8::Arguments	access:private
v8::Arguments::holder_	/usr/include/v8/v8.h	/^  Local<Object> holder_;$/;"	m	class:v8::Arguments	access:private
v8::Arguments::is_construct_call_	/usr/include/v8/v8.h	/^  bool is_construct_call_;$/;"	m	class:v8::Arguments	access:private
v8::Arguments::length_	/usr/include/v8/v8.h	/^  int length_;$/;"	m	class:v8::Arguments	access:private
v8::Arguments::operator []	/usr/include/v8/v8.h	/^  inline Local<Value> operator[](int i) const;$/;"	p	class:v8::Arguments	access:public	signature:(int i) const
v8::Arguments::operator []	/usr/include/v8/v8.h	/^Local<Value> Arguments::operator[](int i) const {$/;"	f	class:v8::Arguments	signature:(int i) const
v8::Arguments::values_	/usr/include/v8/v8.h	/^  void** values_;$/;"	m	class:v8::Arguments	access:private
v8::Array	/usr/include/v8/v8.h	/^class V8EXPORT Array : public Object {$/;"	c	namespace:v8	inherits:Object
v8::Array::Array	/usr/include/v8/v8.h	/^  Array();$/;"	p	class:v8::Array	access:private	signature:()
v8::Array::Cast	/usr/include/v8/v8.h	/^  static inline Array* Cast(Value* obj);$/;"	p	class:v8::Array	access:public	signature:(Value* obj)
v8::Array::Cast	/usr/include/v8/v8.h	/^Array* Array::Cast(v8::Value* value) {$/;"	f	class:v8::Array	signature:(v8::Value* value)
v8::Array::CheckCast	/usr/include/v8/v8.h	/^  static void CheckCast(Value* obj);$/;"	p	class:v8::Array	access:private	signature:(Value* obj)
v8::Array::CloneElementAt	/usr/include/v8/v8.h	/^  Local<Object> CloneElementAt(uint32_t index);$/;"	p	class:v8::Array	access:public	signature:(uint32_t index)
v8::Array::Length	/usr/include/v8/v8.h	/^  uint32_t Length() const;$/;"	p	class:v8::Array	access:public	signature:() const
v8::Array::New	/usr/include/v8/v8.h	/^  static Local<Array> New(int length = 0);$/;"	p	class:v8::Array	access:public	signature:(int length = 0)
v8::BeforeCompile	/usr/include/v8/v8-debug.h	/^  BeforeCompile = 4,$/;"	e	enum:v8::DebugEvent
v8::Boolean	/usr/include/v8/v8.h	/^class V8EXPORT Boolean : public Primitive {$/;"	c	namespace:v8	inherits:Primitive
v8::Boolean::New	/usr/include/v8/v8.h	/^  static inline Handle<Boolean> New(bool value);$/;"	p	class:v8::Boolean	access:public	signature:(bool value)
v8::Boolean::New	/usr/include/v8/v8.h	/^Handle<Boolean> Boolean::New(bool value) {$/;"	f	class:v8::Boolean	signature:(bool value)
v8::Boolean::Value	/usr/include/v8/v8.h	/^  bool Value() const;$/;"	p	class:v8::Boolean	access:public	signature:() const
v8::Break	/usr/include/v8/v8-debug.h	/^  Break = 1,$/;"	e	enum:v8::DebugEvent
v8::Context	/usr/include/v8/v8.h	/^class V8EXPORT Context {$/;"	c	namespace:v8
v8::Context::DetachGlobal	/usr/include/v8/v8.h	/^  void DetachGlobal();$/;"	p	class:v8::Context	access:public	signature:()
v8::Context::Enter	/usr/include/v8/v8.h	/^  void Enter();$/;"	p	class:v8::Context	access:public	signature:()
v8::Context::Exit	/usr/include/v8/v8.h	/^  void Exit();$/;"	p	class:v8::Context	access:public	signature:()
v8::Context::GetCalling	/usr/include/v8/v8.h	/^  static Local<Context> GetCalling();$/;"	p	class:v8::Context	access:public	signature:()
v8::Context::GetCurrent	/usr/include/v8/v8.h	/^  static Local<Context> GetCurrent();$/;"	p	class:v8::Context	access:public	signature:()
v8::Context::GetData	/usr/include/v8/v8.h	/^  Local<Value> GetData();$/;"	p	class:v8::Context	access:public	signature:()
v8::Context::GetEntered	/usr/include/v8/v8.h	/^  static Local<Context> GetEntered();$/;"	p	class:v8::Context	access:public	signature:()
v8::Context::GetSecurityToken	/usr/include/v8/v8.h	/^  Handle<Value> GetSecurityToken();$/;"	p	class:v8::Context	access:public	signature:()
v8::Context::Global	/usr/include/v8/v8.h	/^  Local<Object> Global();$/;"	p	class:v8::Context	access:public	signature:()
v8::Context::HasOutOfMemoryException	/usr/include/v8/v8.h	/^  bool HasOutOfMemoryException();$/;"	p	class:v8::Context	access:public	signature:()
v8::Context::InContext	/usr/include/v8/v8.h	/^  static bool InContext();$/;"	p	class:v8::Context	access:public	signature:()
v8::Context::New	/usr/include/v8/v8.h	/^  static Persistent<Context> New($/;"	p	class:v8::Context	access:public	signature:( ExtensionConfiguration* extensions = 0, Handle<ObjectTemplate> global_template = Handle<ObjectTemplate>(), Handle<Value> global_object = Handle<Value>())
v8::Context::Scope	/usr/include/v8/v8.h	/^  class V8EXPORT Scope {$/;"	c	class:v8::Context	access:public
v8::Context::Scope::Scope	/usr/include/v8/v8.h	/^    inline Scope(Handle<Context> context) : context_(context) {$/;"	f	class:v8::Context::Scope	access:public	signature:(Handle<Context> context)
v8::Context::Scope::context_	/usr/include/v8/v8.h	/^    Handle<Context> context_;$/;"	m	class:v8::Context::Scope	access:private
v8::Context::Scope::~Scope	/usr/include/v8/v8.h	/^    inline ~Scope() { context_->Exit(); }$/;"	f	class:v8::Context::Scope	access:public	signature:()
v8::Context::SetData	/usr/include/v8/v8.h	/^  void SetData(Handle<String> data);$/;"	p	class:v8::Context	access:public	signature:(Handle<String> data)
v8::Context::SetSecurityToken	/usr/include/v8/v8.h	/^  void SetSecurityToken(Handle<Value> token);$/;"	p	class:v8::Context	access:public	signature:(Handle<Value> token)
v8::Context::UseDefaultSecurityToken	/usr/include/v8/v8.h	/^  void UseDefaultSecurityToken();$/;"	p	class:v8::Context	access:public	signature:()
v8::ContextGenerator	/usr/include/v8/v8.h	/^typedef Persistent<Context> (*ContextGenerator)();$/;"	t	namespace:v8
v8::CounterLookupCallback	/usr/include/v8/v8.h	/^typedef int* (*CounterLookupCallback)(const char* name);$/;"	t	namespace:v8
v8::CreateHistogramCallback	/usr/include/v8/v8.h	/^typedef void* (*CreateHistogramCallback)(const char* name,$/;"	t	namespace:v8
v8::DEFAULT	/usr/include/v8/v8.h	/^  DEFAULT               = 0,$/;"	e	enum:v8::AccessControl
v8::Data	/usr/include/v8/v8.h	/^class V8EXPORT Data {$/;"	c	namespace:v8
v8::Data::Data	/usr/include/v8/v8.h	/^  Data();$/;"	p	class:v8::Data	access:private	signature:()
v8::Date	/usr/include/v8/v8.h	/^class V8EXPORT Date : public Value {$/;"	c	namespace:v8	inherits:Value
v8::Date::Cast	/usr/include/v8/v8.h	/^  static inline Date* Cast(v8::Value* obj);$/;"	p	class:v8::Date	access:public	signature:(v8::Value* obj)
v8::Date::Cast	/usr/include/v8/v8.h	/^Date* Date::Cast(v8::Value* value) {$/;"	f	class:v8::Date	signature:(v8::Value* value)
v8::Date::CheckCast	/usr/include/v8/v8.h	/^  static void CheckCast(v8::Value* obj);$/;"	p	class:v8::Date	access:private	signature:(v8::Value* obj)
v8::Date::New	/usr/include/v8/v8.h	/^  static Local<Value> New(double time);$/;"	p	class:v8::Date	access:public	signature:(double time)
v8::Date::NumberValue	/usr/include/v8/v8.h	/^  double NumberValue() const;$/;"	p	class:v8::Date	access:public	signature:() const
v8::Debug	/usr/include/v8/v8-debug.h	/^class EXPORT Debug {$/;"	c	namespace:v8
v8::Debug::Call	/usr/include/v8/v8-debug.h	/^  static Local<Value> Call(v8::Handle<v8::Function> fun,$/;"	p	class:v8::Debug	access:public	signature:(v8::Handle<v8::Function> fun, Handle<Value> data = Handle<Value>())
v8::Debug::ClientData	/usr/include/v8/v8-debug.h	/^  class ClientData {$/;"	c	class:v8::Debug	access:public
v8::Debug::ClientData::~ClientData	/usr/include/v8/v8-debug.h	/^    virtual ~ClientData() {}$/;"	f	class:v8::Debug::ClientData	access:public	signature:()
v8::Debug::DebugBreak	/usr/include/v8/v8-debug.h	/^  static void DebugBreak();$/;"	p	class:v8::Debug	access:public	signature:()
v8::Debug::DebugMessageDispatchHandler	/usr/include/v8/v8-debug.h	/^  typedef void (*DebugMessageDispatchHandler)();$/;"	t	class:v8::Debug	access:public
v8::Debug::EnableAgent	/usr/include/v8/v8-debug.h	/^  static bool EnableAgent(const char* name, int port,$/;"	p	class:v8::Debug	access:public	signature:(const char* name, int port, bool wait_for_connection = false)
v8::Debug::EventCallback	/usr/include/v8/v8-debug.h	/^  typedef void (*EventCallback)(DebugEvent event,$/;"	t	class:v8::Debug	access:public
v8::Debug::GetMirror	/usr/include/v8/v8-debug.h	/^  static Local<Value> GetMirror(v8::Handle<v8::Value> obj);$/;"	p	class:v8::Debug	access:public	signature:(v8::Handle<v8::Value> obj)
v8::Debug::HostDispatchHandler	/usr/include/v8/v8-debug.h	/^  typedef void (*HostDispatchHandler)();$/;"	t	class:v8::Debug	access:public
v8::Debug::Message	/usr/include/v8/v8-debug.h	/^  class Message {$/;"	c	class:v8::Debug	access:public
v8::Debug::Message::GetClientData	/usr/include/v8/v8-debug.h	/^    virtual ClientData* GetClientData() const = 0;$/;"	p	class:v8::Debug::Message	access:public	signature:() const
v8::Debug::Message::GetEvent	/usr/include/v8/v8-debug.h	/^    virtual DebugEvent GetEvent() const = 0;$/;"	p	class:v8::Debug::Message	access:public	signature:() const
v8::Debug::Message::GetEventContext	/usr/include/v8/v8-debug.h	/^    virtual Handle<Context> GetEventContext() const = 0;$/;"	p	class:v8::Debug::Message	access:public	signature:() const
v8::Debug::Message::GetEventData	/usr/include/v8/v8-debug.h	/^    virtual Handle<Object> GetEventData() const = 0;$/;"	p	class:v8::Debug::Message	access:public	signature:() const
v8::Debug::Message::GetExecutionState	/usr/include/v8/v8-debug.h	/^    virtual Handle<Object> GetExecutionState() const = 0;$/;"	p	class:v8::Debug::Message	access:public	signature:() const
v8::Debug::Message::GetJSON	/usr/include/v8/v8-debug.h	/^    virtual Handle<String> GetJSON() const = 0;$/;"	p	class:v8::Debug::Message	access:public	signature:() const
v8::Debug::Message::IsEvent	/usr/include/v8/v8-debug.h	/^    virtual bool IsEvent() const = 0;$/;"	p	class:v8::Debug::Message	access:public	signature:() const
v8::Debug::Message::IsResponse	/usr/include/v8/v8-debug.h	/^    virtual bool IsResponse() const = 0;$/;"	p	class:v8::Debug::Message	access:public	signature:() const
v8::Debug::Message::WillStartRunning	/usr/include/v8/v8-debug.h	/^    virtual bool WillStartRunning() const = 0;$/;"	p	class:v8::Debug::Message	access:public	signature:() const
v8::Debug::Message::~Message	/usr/include/v8/v8-debug.h	/^    virtual ~Message() {}$/;"	f	class:v8::Debug::Message	access:public	signature:()
v8::Debug::MessageHandler	/usr/include/v8/v8-debug.h	/^  typedef void (*MessageHandler)(const uint16_t* message, int length,$/;"	t	class:v8::Debug	access:public
v8::Debug::MessageHandler2	/usr/include/v8/v8-debug.h	/^  typedef void (*MessageHandler2)(const Message& message);$/;"	t	class:v8::Debug	access:public
v8::Debug::SendCommand	/usr/include/v8/v8-debug.h	/^  static void SendCommand(const uint16_t* command, int length,$/;"	p	class:v8::Debug	access:public	signature:(const uint16_t* command, int length, ClientData* client_data = NULL)
v8::Debug::SetDebugEventListener	/usr/include/v8/v8-debug.h	/^  static bool SetDebugEventListener(EventCallback that,$/;"	p	class:v8::Debug	access:public	signature:(EventCallback that, Handle<Value> data = Handle<Value>())
v8::Debug::SetDebugEventListener	/usr/include/v8/v8-debug.h	/^  static bool SetDebugEventListener(v8::Handle<v8::Object> that,$/;"	p	class:v8::Debug	access:public	signature:(v8::Handle<v8::Object> that, Handle<Value> data = Handle<Value>())
v8::Debug::SetDebugMessageDispatchHandler	/usr/include/v8/v8-debug.h	/^  static void SetDebugMessageDispatchHandler($/;"	p	class:v8::Debug	access:public	signature:( DebugMessageDispatchHandler handler)
v8::Debug::SetHostDispatchHandler	/usr/include/v8/v8-debug.h	/^  static void SetHostDispatchHandler(HostDispatchHandler handler,$/;"	p	class:v8::Debug	access:public	signature:(HostDispatchHandler handler, int period = 100)
v8::Debug::SetMessageHandler	/usr/include/v8/v8-debug.h	/^  static void SetMessageHandler(MessageHandler handler,$/;"	p	class:v8::Debug	access:public	signature:(MessageHandler handler, bool message_handler_thread = false)
v8::Debug::SetMessageHandler2	/usr/include/v8/v8-debug.h	/^  static void SetMessageHandler2(MessageHandler2 handler);$/;"	p	class:v8::Debug	access:public	signature:(MessageHandler2 handler)
v8::DebugEvent	/usr/include/v8/v8-debug.h	/^enum DebugEvent {$/;"	g	namespace:v8
v8::DeclareExtension	/usr/include/v8/v8.h	/^class V8EXPORT DeclareExtension {$/;"	c	namespace:v8
v8::DeclareExtension::DeclareExtension	/usr/include/v8/v8.h	/^  inline DeclareExtension(Extension* extension) {$/;"	f	class:v8::DeclareExtension	access:public	signature:(Extension* extension)
v8::DontDelete	/usr/include/v8/v8.h	/^  DontDelete = 1 << 2$/;"	e	enum:v8::PropertyAttribute
v8::DontEnum	/usr/include/v8/v8.h	/^  DontEnum   = 1 << 1,$/;"	e	enum:v8::PropertyAttribute
v8::Exception	/usr/include/v8/v8-debug.h	/^  Exception = 2,$/;"	e	enum:v8::DebugEvent
v8::Exception	/usr/include/v8/v8.h	/^class V8EXPORT Exception {$/;"	c	namespace:v8
v8::Exception::Error	/usr/include/v8/v8.h	/^  static Local<Value> Error(Handle<String> message);$/;"	p	class:v8::Exception	access:public	signature:(Handle<String> message)
v8::Exception::RangeError	/usr/include/v8/v8.h	/^  static Local<Value> RangeError(Handle<String> message);$/;"	p	class:v8::Exception	access:public	signature:(Handle<String> message)
v8::Exception::ReferenceError	/usr/include/v8/v8.h	/^  static Local<Value> ReferenceError(Handle<String> message);$/;"	p	class:v8::Exception	access:public	signature:(Handle<String> message)
v8::Exception::SyntaxError	/usr/include/v8/v8.h	/^  static Local<Value> SyntaxError(Handle<String> message);$/;"	p	class:v8::Exception	access:public	signature:(Handle<String> message)
v8::Exception::TypeError	/usr/include/v8/v8.h	/^  static Local<Value> TypeError(Handle<String> message);$/;"	p	class:v8::Exception	access:public	signature:(Handle<String> message)
v8::Extension	/usr/include/v8/v8.h	/^class V8EXPORT Extension {  \/\/ NOLINT$/;"	c	namespace:v8
v8::Extension::Extension	/usr/include/v8/v8.h	/^  Extension(const Extension&);$/;"	p	class:v8::Extension	access:private	signature:(const Extension&)
v8::Extension::Extension	/usr/include/v8/v8.h	/^  Extension(const char* name,$/;"	p	class:v8::Extension	access:public	signature:(const char* name, const char* source = 0, int dep_count = 0, const char** deps = 0)
v8::Extension::GetNativeFunction	/usr/include/v8/v8.h	/^      GetNativeFunction(v8::Handle<v8::String> name) {$/;"	f	class:v8::Extension	access:public	signature:(v8::Handle<v8::String> name)
v8::Extension::auto_enable	/usr/include/v8/v8.h	/^  bool auto_enable() { return auto_enable_; }$/;"	f	class:v8::Extension	access:public	signature:()
v8::Extension::auto_enable_	/usr/include/v8/v8.h	/^  bool auto_enable_;$/;"	m	class:v8::Extension	access:private
v8::Extension::dep_count_	/usr/include/v8/v8.h	/^  int dep_count_;$/;"	m	class:v8::Extension	access:private
v8::Extension::dependencies	/usr/include/v8/v8.h	/^  const char** dependencies() { return deps_; }$/;"	f	class:v8::Extension	access:public	signature:()
v8::Extension::dependency_count	/usr/include/v8/v8.h	/^  int dependency_count() { return dep_count_; }$/;"	f	class:v8::Extension	access:public	signature:()
v8::Extension::deps_	/usr/include/v8/v8.h	/^  const char** deps_;$/;"	m	class:v8::Extension	access:private
v8::Extension::name	/usr/include/v8/v8.h	/^  const char* name() { return name_; }$/;"	f	class:v8::Extension	access:public	signature:()
v8::Extension::name_	/usr/include/v8/v8.h	/^  const char* name_;$/;"	m	class:v8::Extension	access:private
v8::Extension::operator =	/usr/include/v8/v8.h	/^  void operator=(const Extension&);$/;"	p	class:v8::Extension	access:private	signature:(const Extension&)
v8::Extension::set_auto_enable	/usr/include/v8/v8.h	/^  void set_auto_enable(bool value) { auto_enable_ = value; }$/;"	f	class:v8::Extension	access:public	signature:(bool value)
v8::Extension::source	/usr/include/v8/v8.h	/^  const char* source() { return source_; }$/;"	f	class:v8::Extension	access:public	signature:()
v8::Extension::source_	/usr/include/v8/v8.h	/^  const char* source_;$/;"	m	class:v8::Extension	access:private
v8::Extension::~Extension	/usr/include/v8/v8.h	/^  virtual ~Extension() { }$/;"	f	class:v8::Extension	access:public	signature:()
v8::ExtensionConfiguration	/usr/include/v8/v8.h	/^class V8EXPORT ExtensionConfiguration {$/;"	c	namespace:v8
v8::ExtensionConfiguration::ExtensionConfiguration	/usr/include/v8/v8.h	/^  ExtensionConfiguration(int name_count, const char* names[])$/;"	f	class:v8::ExtensionConfiguration	access:public	signature:(int name_count, const char* names[])
v8::ExtensionConfiguration::name_count_	/usr/include/v8/v8.h	/^  int name_count_;$/;"	m	class:v8::ExtensionConfiguration	access:private
v8::ExtensionConfiguration::names_	/usr/include/v8/v8.h	/^  const char** names_;$/;"	m	class:v8::ExtensionConfiguration	access:private
v8::External	/usr/include/v8/v8.h	/^class V8EXPORT External : public Value {$/;"	c	namespace:v8	inherits:Value
v8::External::Cast	/usr/include/v8/v8.h	/^  static inline External* Cast(Value* obj);$/;"	p	class:v8::External	access:public	signature:(Value* obj)
v8::External::Cast	/usr/include/v8/v8.h	/^External* External::Cast(v8::Value* value) {$/;"	f	class:v8::External	signature:(v8::Value* value)
v8::External::CheckCast	/usr/include/v8/v8.h	/^  static void CheckCast(v8::Value* obj);$/;"	p	class:v8::External	access:private	signature:(v8::Value* obj)
v8::External::External	/usr/include/v8/v8.h	/^  External();$/;"	p	class:v8::External	access:private	signature:()
v8::External::FullUnwrap	/usr/include/v8/v8.h	/^  static void* FullUnwrap(Handle<v8::Value> obj);$/;"	p	class:v8::External	access:private	signature:(Handle<v8::Value> obj)
v8::External::New	/usr/include/v8/v8.h	/^  static Local<External> New(void* value);$/;"	p	class:v8::External	access:public	signature:(void* value)
v8::External::QuickUnwrap	/usr/include/v8/v8.h	/^  static inline void* QuickUnwrap(Handle<v8::Value> obj);$/;"	p	class:v8::External	access:private	signature:(Handle<v8::Value> obj)
v8::External::QuickUnwrap	/usr/include/v8/v8.h	/^void* External::QuickUnwrap(Handle<v8::Value> wrapper) {$/;"	f	class:v8::External	signature:(Handle<v8::Value> wrapper)
v8::External::Unwrap	/usr/include/v8/v8.h	/^  static inline void* Unwrap(Handle<Value> obj);$/;"	p	class:v8::External	access:public	signature:(Handle<Value> obj)
v8::External::Unwrap	/usr/include/v8/v8.h	/^void* External::Unwrap(Handle<v8::Value> obj) {$/;"	f	class:v8::External	signature:(Handle<v8::Value> obj)
v8::External::Value	/usr/include/v8/v8.h	/^  void* Value() const;$/;"	p	class:v8::External	access:public	signature:() const
v8::External::Wrap	/usr/include/v8/v8.h	/^  static Local<Value> Wrap(void* data);$/;"	p	class:v8::External	access:public	signature:(void* data)
v8::ExternalArrayType	/usr/include/v8/v8.h	/^enum ExternalArrayType {$/;"	g	namespace:v8
v8::FailedAccessCheckCallback	/usr/include/v8/v8.h	/^typedef void (*FailedAccessCheckCallback)(Local<Object> target,$/;"	t	namespace:v8
v8::False	/usr/include/v8/v8.h	/^Handle<Boolean> V8EXPORT False();$/;"	p	namespace:v8	signature:()
v8::FatalErrorCallback	/usr/include/v8/v8.h	/^typedef void (*FatalErrorCallback)(const char* location, const char* message);$/;"	t	namespace:v8
v8::Function	/usr/include/v8/v8.h	/^class V8EXPORT Function : public Object {$/;"	c	namespace:v8	inherits:Object
v8::Function::Call	/usr/include/v8/v8.h	/^  Local<Value> Call(Handle<Object> recv, int argc, Handle<Value> argv[]);$/;"	p	class:v8::Function	access:public	signature:(Handle<Object> recv, int argc, Handle<Value> argv[])
v8::Function::Cast	/usr/include/v8/v8.h	/^  static inline Function* Cast(Value* obj);$/;"	p	class:v8::Function	access:public	signature:(Value* obj)
v8::Function::Cast	/usr/include/v8/v8.h	/^Function* Function::Cast(v8::Value* value) {$/;"	f	class:v8::Function	signature:(v8::Value* value)
v8::Function::CheckCast	/usr/include/v8/v8.h	/^  static void CheckCast(Value* obj);$/;"	p	class:v8::Function	access:private	signature:(Value* obj)
v8::Function::Function	/usr/include/v8/v8.h	/^  Function();$/;"	p	class:v8::Function	access:private	signature:()
v8::Function::GetName	/usr/include/v8/v8.h	/^  Handle<Value> GetName() const;$/;"	p	class:v8::Function	access:public	signature:() const
v8::Function::NewInstance	/usr/include/v8/v8.h	/^  Local<Object> NewInstance() const;$/;"	p	class:v8::Function	access:public	signature:() const
v8::Function::NewInstance	/usr/include/v8/v8.h	/^  Local<Object> NewInstance(int argc, Handle<Value> argv[]) const;$/;"	p	class:v8::Function	access:public	signature:(int argc, Handle<Value> argv[]) const
v8::Function::SetName	/usr/include/v8/v8.h	/^  void SetName(Handle<String> name);$/;"	p	class:v8::Function	access:public	signature:(Handle<String> name)
v8::FunctionTemplate	/usr/include/v8/v8.h	/^class V8EXPORT FunctionTemplate : public Template {$/;"	c	namespace:v8	inherits:Template
v8::FunctionTemplate::AddInstancePropertyAccessor	/usr/include/v8/v8.h	/^  void AddInstancePropertyAccessor(Handle<String> name,$/;"	p	class:v8::FunctionTemplate	access:private	signature:(Handle<String> name, AccessorGetter getter, AccessorSetter setter, Handle<Value> data, AccessControl settings, PropertyAttribute attributes)
v8::FunctionTemplate::FunctionTemplate	/usr/include/v8/v8.h	/^  FunctionTemplate();$/;"	p	class:v8::FunctionTemplate	access:private	signature:()
v8::FunctionTemplate::GetFunction	/usr/include/v8/v8.h	/^  Local<Function> GetFunction();$/;"	p	class:v8::FunctionTemplate	access:public	signature:()
v8::FunctionTemplate::HasInstance	/usr/include/v8/v8.h	/^  bool HasInstance(Handle<Value> object);$/;"	p	class:v8::FunctionTemplate	access:public	signature:(Handle<Value> object)
v8::FunctionTemplate::Inherit	/usr/include/v8/v8.h	/^  void Inherit(Handle<FunctionTemplate> parent);$/;"	p	class:v8::FunctionTemplate	access:public	signature:(Handle<FunctionTemplate> parent)
v8::FunctionTemplate::InstanceTemplate	/usr/include/v8/v8.h	/^  Local<ObjectTemplate> InstanceTemplate();$/;"	p	class:v8::FunctionTemplate	access:public	signature:()
v8::FunctionTemplate::New	/usr/include/v8/v8.h	/^  static Local<FunctionTemplate> New($/;"	p	class:v8::FunctionTemplate	access:public	signature:( InvocationCallback callback = 0, Handle<Value> data = Handle<Value>(), Handle<Signature> signature = Handle<Signature>())
v8::FunctionTemplate::PrototypeTemplate	/usr/include/v8/v8.h	/^  Local<ObjectTemplate> PrototypeTemplate();$/;"	p	class:v8::FunctionTemplate	access:public	signature:()
v8::FunctionTemplate::SetCallHandler	/usr/include/v8/v8.h	/^  void SetCallHandler(InvocationCallback callback,$/;"	p	class:v8::FunctionTemplate	access:public	signature:(InvocationCallback callback, Handle<Value> data = Handle<Value>())
v8::FunctionTemplate::SetClassName	/usr/include/v8/v8.h	/^  void SetClassName(Handle<String> name);$/;"	p	class:v8::FunctionTemplate	access:public	signature:(Handle<String> name)
v8::FunctionTemplate::SetHiddenPrototype	/usr/include/v8/v8.h	/^  void SetHiddenPrototype(bool value);$/;"	p	class:v8::FunctionTemplate	access:public	signature:(bool value)
v8::FunctionTemplate::SetIndexedInstancePropertyHandler	/usr/include/v8/v8.h	/^  void SetIndexedInstancePropertyHandler(IndexedPropertyGetter getter,$/;"	p	class:v8::FunctionTemplate	access:private	signature:(IndexedPropertyGetter getter, IndexedPropertySetter setter, IndexedPropertyQuery query, IndexedPropertyDeleter remover, IndexedPropertyEnumerator enumerator, Handle<Value> data)
v8::FunctionTemplate::SetInstanceCallAsFunctionHandler	/usr/include/v8/v8.h	/^  void SetInstanceCallAsFunctionHandler(InvocationCallback callback,$/;"	p	class:v8::FunctionTemplate	access:private	signature:(InvocationCallback callback, Handle<Value> data)
v8::FunctionTemplate::SetNamedInstancePropertyHandler	/usr/include/v8/v8.h	/^  void SetNamedInstancePropertyHandler(NamedPropertyGetter getter,$/;"	p	class:v8::FunctionTemplate	access:private	signature:(NamedPropertyGetter getter, NamedPropertySetter setter, NamedPropertyQuery query, NamedPropertyDeleter remover, NamedPropertyEnumerator enumerator, Handle<Value> data)
v8::GCCallback	/usr/include/v8/v8.h	/^typedef void (*GCCallback)();$/;"	t	namespace:v8
v8::Handle	/usr/include/v8/v8.h	/^template <class T> class V8EXPORT_INLINE Handle {$/;"	c	namespace:v8
v8::Handle::Cast	/usr/include/v8/v8.h	/^  template <class S> static inline Handle<T> Cast(Handle<S> that) {$/;"	f	class:v8::Handle	access:public	signature:(Handle<S> that)
v8::Handle::Clear	/usr/include/v8/v8.h	/^  void Clear() { this->val_ = 0; }$/;"	f	class:v8::Handle	access:public	signature:()
v8::Handle::Handle	/usr/include/v8/v8.h	/^  explicit Handle(T* val) : val_(val) { }$/;"	f	class:v8::Handle	access:public	signature:(T* val)
v8::Handle::Handle	/usr/include/v8/v8.h	/^  inline Handle();$/;"	p	class:v8::Handle	access:public	signature:()
v8::Handle::Handle	/usr/include/v8/v8.h	/^  template <class S> inline Handle(Handle<S> that)$/;"	f	class:v8::Handle	access:public	signature:(Handle<S> that)
v8::Handle::Handle	/usr/include/v8/v8.h	/^Handle<T>::Handle() : val_(0) { }$/;"	f	class:v8::Handle	signature:()
v8::Handle::IsEmpty	/usr/include/v8/v8.h	/^  bool IsEmpty() const { return val_ == 0; }$/;"	f	class:v8::Handle	access:public	signature:() const
v8::Handle::operator !=	/usr/include/v8/v8.h	/^  template <class S> bool operator!=(Handle<S> that) const {$/;"	f	class:v8::Handle	access:public	signature:(Handle<S> that) const
v8::Handle::operator *	/usr/include/v8/v8.h	/^  T* operator*() const { return val_; }$/;"	f	class:v8::Handle	access:public	signature:() const
v8::Handle::operator ->	/usr/include/v8/v8.h	/^  T* operator->() const { return val_; }$/;"	f	class:v8::Handle	access:public	signature:() const
v8::Handle::operator ==	/usr/include/v8/v8.h	/^  template <class S> bool operator==(Handle<S> that) const {$/;"	f	class:v8::Handle	access:public	signature:(Handle<S> that) const
v8::Handle::val_	/usr/include/v8/v8.h	/^  T* val_;$/;"	m	class:v8::Handle	access:private
v8::HandleScope	/usr/include/v8/v8.h	/^class V8EXPORT HandleScope {$/;"	c	namespace:v8
v8::HandleScope::Close	/usr/include/v8/v8.h	/^  template <class T> Local<T> Close(Handle<T> value);$/;"	p	class:v8::HandleScope	access:public	signature:(Handle<T> value)
v8::HandleScope::Close	/usr/include/v8/v8.h	/^Local<T> HandleScope::Close(Handle<T> value) {$/;"	f	class:v8::HandleScope	signature:(Handle<T> value)
v8::HandleScope::CreateHandle	/usr/include/v8/v8.h	/^  static internal::Object** CreateHandle(internal::Object* value);$/;"	p	class:v8::HandleScope	access:public	signature:(internal::Object* value)
v8::HandleScope::Data	/usr/include/v8/v8.h	/^  class V8EXPORT Data {$/;"	c	class:v8::HandleScope	access:private
v8::HandleScope::Data::Initialize	/usr/include/v8/v8.h	/^    inline void Initialize() {$/;"	f	class:v8::HandleScope::Data	access:public	signature:()
v8::HandleScope::Data::extensions	/usr/include/v8/v8.h	/^    int extensions;$/;"	m	class:v8::HandleScope::Data	access:public
v8::HandleScope::Data::limit	/usr/include/v8/v8.h	/^    internal::Object** limit;$/;"	m	class:v8::HandleScope::Data	access:public
v8::HandleScope::Data::next	/usr/include/v8/v8.h	/^    internal::Object** next;$/;"	m	class:v8::HandleScope::Data	access:public
v8::HandleScope::HandleScope	/usr/include/v8/v8.h	/^  HandleScope();$/;"	p	class:v8::HandleScope	access:public	signature:()
v8::HandleScope::HandleScope	/usr/include/v8/v8.h	/^  HandleScope(const HandleScope&);$/;"	p	class:v8::HandleScope	access:private	signature:(const HandleScope&)
v8::HandleScope::NumberOfHandles	/usr/include/v8/v8.h	/^  static int NumberOfHandles();$/;"	p	class:v8::HandleScope	access:public	signature:()
v8::HandleScope::RawClose	/usr/include/v8/v8.h	/^  internal::Object** RawClose(internal::Object** value);$/;"	p	class:v8::HandleScope	access:private	signature:(internal::Object** value)
v8::HandleScope::is_closed_	/usr/include/v8/v8.h	/^  bool is_closed_;$/;"	m	class:v8::HandleScope	access:private
v8::HandleScope::operator =	/usr/include/v8/v8.h	/^  void operator=(const HandleScope&);$/;"	p	class:v8::HandleScope	access:private	signature:(const HandleScope&)
v8::HandleScope::operator delete	/usr/include/v8/v8.h	/^  void operator delete(void*, size_t);$/;"	p	class:v8::HandleScope	access:private	signature:(void*, size_t)
v8::HandleScope::operator new	/usr/include/v8/v8.h	/^  void* operator new(size_t size);$/;"	p	class:v8::HandleScope	access:private	signature:(size_t size)
v8::HandleScope::previous_	/usr/include/v8/v8.h	/^  Data previous_;$/;"	m	class:v8::HandleScope	access:private
v8::HandleScope::~HandleScope	/usr/include/v8/v8.h	/^  ~HandleScope();$/;"	p	class:v8::HandleScope	access:public	signature:()
v8::HeapStatistics	/usr/include/v8/v8.h	/^class V8EXPORT HeapStatistics {$/;"	c	namespace:v8
v8::HeapStatistics::HeapStatistics	/usr/include/v8/v8.h	/^  HeapStatistics();$/;"	p	class:v8::HeapStatistics	access:public	signature:()
v8::HeapStatistics::set_total_heap_size	/usr/include/v8/v8.h	/^  void set_total_heap_size(size_t size) { total_heap_size_ = size; }$/;"	f	class:v8::HeapStatistics	access:private	signature:(size_t size)
v8::HeapStatistics::set_used_heap_size	/usr/include/v8/v8.h	/^  void set_used_heap_size(size_t size) { used_heap_size_ = size; }$/;"	f	class:v8::HeapStatistics	access:private	signature:(size_t size)
v8::HeapStatistics::total_heap_size	/usr/include/v8/v8.h	/^  size_t total_heap_size() { return total_heap_size_; }$/;"	f	class:v8::HeapStatistics	access:public	signature:()
v8::HeapStatistics::total_heap_size_	/usr/include/v8/v8.h	/^  size_t total_heap_size_;$/;"	m	class:v8::HeapStatistics	access:private
v8::HeapStatistics::used_heap_size	/usr/include/v8/v8.h	/^  size_t used_heap_size() { return used_heap_size_; }$/;"	f	class:v8::HeapStatistics	access:public	signature:()
v8::HeapStatistics::used_heap_size_	/usr/include/v8/v8.h	/^  size_t used_heap_size_;$/;"	m	class:v8::HeapStatistics	access:private
v8::IndexedPropertyDeleter	/usr/include/v8/v8.h	/^typedef Handle<Boolean> (*IndexedPropertyDeleter)(uint32_t index,$/;"	t	namespace:v8
v8::IndexedPropertyEnumerator	/usr/include/v8/v8.h	/^typedef Handle<Array> (*IndexedPropertyEnumerator)(const AccessorInfo& info);$/;"	t	namespace:v8
v8::IndexedPropertyGetter	/usr/include/v8/v8.h	/^typedef Handle<Value> (*IndexedPropertyGetter)(uint32_t index,$/;"	t	namespace:v8
v8::IndexedPropertyQuery	/usr/include/v8/v8.h	/^typedef Handle<Boolean> (*IndexedPropertyQuery)(uint32_t index,$/;"	t	namespace:v8
v8::IndexedPropertySetter	/usr/include/v8/v8.h	/^typedef Handle<Value> (*IndexedPropertySetter)(uint32_t index,$/;"	t	namespace:v8
v8::IndexedSecurityCallback	/usr/include/v8/v8.h	/^typedef bool (*IndexedSecurityCallback)(Local<Object> host,$/;"	t	namespace:v8
v8::Int32	/usr/include/v8/v8.h	/^class V8EXPORT Int32 : public Integer {$/;"	c	namespace:v8	inherits:Integer
v8::Int32::Int32	/usr/include/v8/v8.h	/^  Int32();$/;"	p	class:v8::Int32	access:private	signature:()
v8::Int32::Value	/usr/include/v8/v8.h	/^  int32_t Value() const;$/;"	p	class:v8::Int32	access:public	signature:() const
v8::Integer	/usr/include/v8/v8.h	/^class V8EXPORT Integer : public Number {$/;"	c	namespace:v8	inherits:Number
v8::Integer::Cast	/usr/include/v8/v8.h	/^  static inline Integer* Cast(v8::Value* obj);$/;"	p	class:v8::Integer	access:public	signature:(v8::Value* obj)
v8::Integer::Cast	/usr/include/v8/v8.h	/^Integer* Integer::Cast(v8::Value* value) {$/;"	f	class:v8::Integer	signature:(v8::Value* value)
v8::Integer::CheckCast	/usr/include/v8/v8.h	/^  static void CheckCast(v8::Value* obj);$/;"	p	class:v8::Integer	access:private	signature:(v8::Value* obj)
v8::Integer::Integer	/usr/include/v8/v8.h	/^  Integer();$/;"	p	class:v8::Integer	access:private	signature:()
v8::Integer::New	/usr/include/v8/v8.h	/^  static Local<Integer> New(int32_t value);$/;"	p	class:v8::Integer	access:public	signature:(int32_t value)
v8::Integer::NewFromUnsigned	/usr/include/v8/v8.h	/^  static Local<Integer> NewFromUnsigned(uint32_t value);$/;"	p	class:v8::Integer	access:public	signature:(uint32_t value)
v8::Integer::Value	/usr/include/v8/v8.h	/^  int64_t Value() const;$/;"	p	class:v8::Integer	access:public	signature:() const
v8::InvocationCallback	/usr/include/v8/v8.h	/^typedef Handle<Value> (*InvocationCallback)(const Arguments& args);$/;"	t	namespace:v8
v8::Local	/usr/include/v8/v8.h	/^template <class T> class V8EXPORT_INLINE Local : public Handle<T> {$/;"	c	namespace:v8	inherits:Handle
v8::Local::Cast	/usr/include/v8/v8.h	/^  template <class S> static inline Local<T> Cast(Local<S> that) {$/;"	f	class:v8::Local	access:public	signature:(Local<S> that)
v8::Local::Local	/usr/include/v8/v8.h	/^  inline Local();$/;"	p	class:v8::Local	access:public	signature:()
v8::Local::Local	/usr/include/v8/v8.h	/^  template <class S> inline Local(Local<S> that)$/;"	f	class:v8::Local	access:public	signature:(Local<S> that)
v8::Local::Local	/usr/include/v8/v8.h	/^  template <class S> inline Local(S* that) : Handle<T>(that) { }$/;"	f	class:v8::Local	access:public	signature:(S* that)
v8::Local::Local	/usr/include/v8/v8.h	/^Local<T>::Local() : Handle<T>() { }$/;"	f	class:v8::Local	signature:()
v8::Local::New	/usr/include/v8/v8.h	/^  inline static Local<T> New(Handle<T> that);$/;"	p	class:v8::Local	access:public	signature:(Handle<T> that)
v8::Local::New	/usr/include/v8/v8.h	/^Local<T> Local<T>::New(Handle<T> that) {$/;"	f	class:v8::Local	signature:(Handle<T> that)
v8::Locker	/usr/include/v8/v8.h	/^class V8EXPORT Locker {$/;"	c	namespace:v8
v8::Locker::IsActive	/usr/include/v8/v8.h	/^  static bool IsActive() { return active_; }$/;"	f	class:v8::Locker	access:public	signature:()
v8::Locker::IsLocked	/usr/include/v8/v8.h	/^  static bool IsLocked();$/;"	p	class:v8::Locker	access:public	signature:()
v8::Locker::Locker	/usr/include/v8/v8.h	/^  Locker();$/;"	p	class:v8::Locker	access:public	signature:()
v8::Locker::Locker	/usr/include/v8/v8.h	/^  Locker(const Locker&);$/;"	p	class:v8::Locker	access:private	signature:(const Locker&)
v8::Locker::StartPreemption	/usr/include/v8/v8.h	/^  static void StartPreemption(int every_n_ms);$/;"	p	class:v8::Locker	access:public	signature:(int every_n_ms)
v8::Locker::StopPreemption	/usr/include/v8/v8.h	/^  static void StopPreemption();$/;"	p	class:v8::Locker	access:public	signature:()
v8::Locker::active_	/usr/include/v8/v8.h	/^  static bool active_;$/;"	m	class:v8::Locker	access:private
v8::Locker::has_lock_	/usr/include/v8/v8.h	/^  bool has_lock_;$/;"	m	class:v8::Locker	access:private
v8::Locker::operator =	/usr/include/v8/v8.h	/^  void operator=(const Locker&);$/;"	p	class:v8::Locker	access:private	signature:(const Locker&)
v8::Locker::top_level_	/usr/include/v8/v8.h	/^  bool top_level_;$/;"	m	class:v8::Locker	access:private
v8::Locker::~Locker	/usr/include/v8/v8.h	/^  ~Locker();$/;"	p	class:v8::Locker	access:public	signature:()
v8::LookupCallback	/usr/include/v8/v8.h	/^typedef int (*LookupCallback)(Local<Object> self, Local<String> name);$/;"	t	namespace:v8
v8::Message	/usr/include/v8/v8.h	/^class V8EXPORT Message {$/;"	c	namespace:v8
v8::Message::Get	/usr/include/v8/v8.h	/^  Local<String> Get() const;$/;"	p	class:v8::Message	access:public	signature:() const
v8::Message::GetEndColumn	/usr/include/v8/v8.h	/^  int GetEndColumn() const;$/;"	p	class:v8::Message	access:public	signature:() const
v8::Message::GetEndPosition	/usr/include/v8/v8.h	/^  int GetEndPosition() const;$/;"	p	class:v8::Message	access:public	signature:() const
v8::Message::GetLineNumber	/usr/include/v8/v8.h	/^  int GetLineNumber() const;$/;"	p	class:v8::Message	access:public	signature:() const
v8::Message::GetScriptData	/usr/include/v8/v8.h	/^  Handle<Value> GetScriptData() const;$/;"	p	class:v8::Message	access:public	signature:() const
v8::Message::GetScriptResourceName	/usr/include/v8/v8.h	/^  Handle<Value> GetScriptResourceName() const;$/;"	p	class:v8::Message	access:public	signature:() const
v8::Message::GetSourceLine	/usr/include/v8/v8.h	/^  Local<String> GetSourceLine() const;$/;"	p	class:v8::Message	access:public	signature:() const
v8::Message::GetStartColumn	/usr/include/v8/v8.h	/^  int GetStartColumn() const;$/;"	p	class:v8::Message	access:public	signature:() const
v8::Message::GetStartPosition	/usr/include/v8/v8.h	/^  int GetStartPosition() const;$/;"	p	class:v8::Message	access:public	signature:() const
v8::Message::PrintCurrentStackTrace	/usr/include/v8/v8.h	/^  static void PrintCurrentStackTrace(FILE* out);$/;"	p	class:v8::Message	access:public	signature:(FILE* out)
v8::MessageCallback	/usr/include/v8/v8.h	/^typedef void (*MessageCallback)(Handle<Message> message, Handle<Value> data);$/;"	t	namespace:v8
v8::NamedPropertyDeleter	/usr/include/v8/v8.h	/^typedef Handle<Boolean> (*NamedPropertyDeleter)(Local<String> property,$/;"	t	namespace:v8
v8::NamedPropertyEnumerator	/usr/include/v8/v8.h	/^typedef Handle<Array> (*NamedPropertyEnumerator)(const AccessorInfo& info);$/;"	t	namespace:v8
v8::NamedPropertyGetter	/usr/include/v8/v8.h	/^typedef Handle<Value> (*NamedPropertyGetter)(Local<String> property,$/;"	t	namespace:v8
v8::NamedPropertyQuery	/usr/include/v8/v8.h	/^typedef Handle<Boolean> (*NamedPropertyQuery)(Local<String> property,$/;"	t	namespace:v8
v8::NamedPropertySetter	/usr/include/v8/v8.h	/^typedef Handle<Value> (*NamedPropertySetter)(Local<String> property,$/;"	t	namespace:v8
v8::NamedSecurityCallback	/usr/include/v8/v8.h	/^typedef bool (*NamedSecurityCallback)(Local<Object> host,$/;"	t	namespace:v8
v8::NewFunction	/usr/include/v8/v8-debug.h	/^  NewFunction = 3,$/;"	e	enum:v8::DebugEvent
v8::None	/usr/include/v8/v8.h	/^  None       = 0,$/;"	e	enum:v8::PropertyAttribute
v8::Null	/usr/include/v8/v8.h	/^Handle<Primitive> V8EXPORT Null();$/;"	p	namespace:v8	signature:()
v8::Number	/usr/include/v8/v8.h	/^class V8EXPORT Number : public Primitive {$/;"	c	namespace:v8	inherits:Primitive
v8::Number::Cast	/usr/include/v8/v8.h	/^  static inline Number* Cast(v8::Value* obj);$/;"	p	class:v8::Number	access:public	signature:(v8::Value* obj)
v8::Number::Cast	/usr/include/v8/v8.h	/^Number* Number::Cast(v8::Value* value) {$/;"	f	class:v8::Number	signature:(v8::Value* value)
v8::Number::CheckCast	/usr/include/v8/v8.h	/^  static void CheckCast(v8::Value* obj);$/;"	p	class:v8::Number	access:private	signature:(v8::Value* obj)
v8::Number::New	/usr/include/v8/v8.h	/^  static Local<Number> New(double value);$/;"	p	class:v8::Number	access:public	signature:(double value)
v8::Number::Number	/usr/include/v8/v8.h	/^  Number();$/;"	p	class:v8::Number	access:private	signature:()
v8::Number::Value	/usr/include/v8/v8.h	/^  double Value() const;$/;"	p	class:v8::Number	access:public	signature:() const
v8::Object	/usr/include/v8/v8.h	/^class V8EXPORT Object : public Value {$/;"	c	namespace:v8	inherits:Value
v8::Object::Cast	/usr/include/v8/v8.h	/^  static inline Object* Cast(Value* obj);$/;"	p	class:v8::Object	access:public	signature:(Value* obj)
v8::Object::Cast	/usr/include/v8/v8.h	/^Object* Object::Cast(v8::Value* value) {$/;"	f	class:v8::Object	signature:(v8::Value* value)
v8::Object::CheckCast	/usr/include/v8/v8.h	/^  static void CheckCast(Value* obj);$/;"	p	class:v8::Object	access:private	signature:(Value* obj)
v8::Object::CheckedGetInternalField	/usr/include/v8/v8.h	/^  Local<Value> CheckedGetInternalField(int index);$/;"	p	class:v8::Object	access:private	signature:(int index)
v8::Object::Clone	/usr/include/v8/v8.h	/^  Local<Object> Clone();$/;"	p	class:v8::Object	access:public	signature:()
v8::Object::Delete	/usr/include/v8/v8.h	/^  bool Delete(Handle<String> key);$/;"	p	class:v8::Object	access:public	signature:(Handle<String> key)
v8::Object::Delete	/usr/include/v8/v8.h	/^  bool Delete(uint32_t index);$/;"	p	class:v8::Object	access:public	signature:(uint32_t index)
v8::Object::DeleteHiddenValue	/usr/include/v8/v8.h	/^  bool DeleteHiddenValue(Handle<String> key);$/;"	p	class:v8::Object	access:public	signature:(Handle<String> key)
v8::Object::FindInstanceInPrototypeChain	/usr/include/v8/v8.h	/^  Local<Object> FindInstanceInPrototypeChain(Handle<FunctionTemplate> tmpl);$/;"	p	class:v8::Object	access:public	signature:(Handle<FunctionTemplate> tmpl)
v8::Object::ForceDelete	/usr/include/v8/v8.h	/^  bool ForceDelete(Handle<Value> key);$/;"	p	class:v8::Object	access:public	signature:(Handle<Value> key)
v8::Object::ForceSet	/usr/include/v8/v8.h	/^  bool ForceSet(Handle<Value> key,$/;"	p	class:v8::Object	access:public	signature:(Handle<Value> key, Handle<Value> value, PropertyAttribute attribs = None)
v8::Object::Get	/usr/include/v8/v8.h	/^  Local<Value> Get(Handle<Value> key);$/;"	p	class:v8::Object	access:public	signature:(Handle<Value> key)
v8::Object::GetHiddenValue	/usr/include/v8/v8.h	/^  Local<Value> GetHiddenValue(Handle<String> key);$/;"	p	class:v8::Object	access:public	signature:(Handle<String> key)
v8::Object::GetIdentityHash	/usr/include/v8/v8.h	/^  int GetIdentityHash();$/;"	p	class:v8::Object	access:public	signature:()
v8::Object::GetInternalField	/usr/include/v8/v8.h	/^  inline Local<Value> GetInternalField(int index);$/;"	p	class:v8::Object	access:public	signature:(int index)
v8::Object::GetInternalField	/usr/include/v8/v8.h	/^Local<Value> Object::GetInternalField(int index) {$/;"	f	class:v8::Object	signature:(int index)
v8::Object::GetPointerFromInternalField	/usr/include/v8/v8.h	/^  inline void* GetPointerFromInternalField(int index);$/;"	p	class:v8::Object	access:public	signature:(int index)
v8::Object::GetPointerFromInternalField	/usr/include/v8/v8.h	/^void* Object::GetPointerFromInternalField(int index) {$/;"	f	class:v8::Object	signature:(int index)
v8::Object::GetPropertyNames	/usr/include/v8/v8.h	/^  Local<Array> GetPropertyNames();$/;"	p	class:v8::Object	access:public	signature:()
v8::Object::GetPrototype	/usr/include/v8/v8.h	/^  Local<Value> GetPrototype();$/;"	p	class:v8::Object	access:public	signature:()
v8::Object::GetRealNamedProperty	/usr/include/v8/v8.h	/^  Local<Value> GetRealNamedProperty(Handle<String> key);$/;"	p	class:v8::Object	access:public	signature:(Handle<String> key)
v8::Object::GetRealNamedPropertyInPrototypeChain	/usr/include/v8/v8.h	/^  Local<Value> GetRealNamedPropertyInPrototypeChain(Handle<String> key);$/;"	p	class:v8::Object	access:public	signature:(Handle<String> key)
v8::Object::Has	/usr/include/v8/v8.h	/^  bool Has(Handle<String> key);$/;"	p	class:v8::Object	access:public	signature:(Handle<String> key)
v8::Object::Has	/usr/include/v8/v8.h	/^  bool Has(uint32_t index);$/;"	p	class:v8::Object	access:public	signature:(uint32_t index)
v8::Object::HasIndexedLookupInterceptor	/usr/include/v8/v8.h	/^  bool HasIndexedLookupInterceptor();$/;"	p	class:v8::Object	access:public	signature:()
v8::Object::HasNamedLookupInterceptor	/usr/include/v8/v8.h	/^  bool HasNamedLookupInterceptor();$/;"	p	class:v8::Object	access:public	signature:()
v8::Object::HasRealIndexedProperty	/usr/include/v8/v8.h	/^  bool HasRealIndexedProperty(uint32_t index);$/;"	p	class:v8::Object	access:public	signature:(uint32_t index)
v8::Object::HasRealNamedCallbackProperty	/usr/include/v8/v8.h	/^  bool HasRealNamedCallbackProperty(Handle<String> key);$/;"	p	class:v8::Object	access:public	signature:(Handle<String> key)
v8::Object::HasRealNamedProperty	/usr/include/v8/v8.h	/^  bool HasRealNamedProperty(Handle<String> key);$/;"	p	class:v8::Object	access:public	signature:(Handle<String> key)
v8::Object::InternalFieldCount	/usr/include/v8/v8.h	/^  int InternalFieldCount();$/;"	p	class:v8::Object	access:public	signature:()
v8::Object::IsDirty	/usr/include/v8/v8.h	/^  bool IsDirty();$/;"	p	class:v8::Object	access:public	signature:()
v8::Object::New	/usr/include/v8/v8.h	/^  static Local<Object> New();$/;"	p	class:v8::Object	access:public	signature:()
v8::Object::Object	/usr/include/v8/v8.h	/^  Object();$/;"	p	class:v8::Object	access:private	signature:()
v8::Object::ObjectProtoToString	/usr/include/v8/v8.h	/^  Local<String> ObjectProtoToString();$/;"	p	class:v8::Object	access:public	signature:()
v8::Object::Set	/usr/include/v8/v8.h	/^  bool Set(Handle<Value> key,$/;"	p	class:v8::Object	access:public	signature:(Handle<Value> key, Handle<Value> value, PropertyAttribute attribs = None)
v8::Object::SetHiddenValue	/usr/include/v8/v8.h	/^  bool SetHiddenValue(Handle<String> key, Handle<Value> value);$/;"	p	class:v8::Object	access:public	signature:(Handle<String> key, Handle<Value> value)
v8::Object::SetIndexedPropertiesToExternalArrayData	/usr/include/v8/v8.h	/^  void SetIndexedPropertiesToExternalArrayData(void* data,$/;"	p	class:v8::Object	access:public	signature:(void* data, ExternalArrayType array_type, int number_of_elements)
v8::Object::SetIndexedPropertiesToPixelData	/usr/include/v8/v8.h	/^  void SetIndexedPropertiesToPixelData(uint8_t* data, int length);$/;"	p	class:v8::Object	access:public	signature:(uint8_t* data, int length)
v8::Object::SetInternalField	/usr/include/v8/v8.h	/^  void SetInternalField(int index, Handle<Value> value);$/;"	p	class:v8::Object	access:public	signature:(int index, Handle<Value> value)
v8::Object::SetPointerInInternalField	/usr/include/v8/v8.h	/^  void SetPointerInInternalField(int index, void* value);$/;"	p	class:v8::Object	access:public	signature:(int index, void* value)
v8::Object::SlowGetPointerFromInternalField	/usr/include/v8/v8.h	/^  void* SlowGetPointerFromInternalField(int index);$/;"	p	class:v8::Object	access:private	signature:(int index)
v8::Object::TurnOnAccessCheck	/usr/include/v8/v8.h	/^  void TurnOnAccessCheck();$/;"	p	class:v8::Object	access:public	signature:()
v8::Object::UncheckedGetInternalField	/usr/include/v8/v8.h	/^  inline Local<Value> UncheckedGetInternalField(int index);$/;"	p	class:v8::Object	access:private	signature:(int index)
v8::Object::UncheckedGetInternalField	/usr/include/v8/v8.h	/^Local<Value> Object::UncheckedGetInternalField(int index) {$/;"	f	class:v8::Object	signature:(int index)
v8::ObjectTemplate	/usr/include/v8/v8.h	/^class V8EXPORT ObjectTemplate : public Template {$/;"	c	namespace:v8	inherits:Template
v8::ObjectTemplate::InternalFieldCount	/usr/include/v8/v8.h	/^  int InternalFieldCount();$/;"	p	class:v8::ObjectTemplate	access:public	signature:()
v8::ObjectTemplate::MarkAsUndetectable	/usr/include/v8/v8.h	/^  void MarkAsUndetectable();$/;"	p	class:v8::ObjectTemplate	access:public	signature:()
v8::ObjectTemplate::New	/usr/include/v8/v8.h	/^  static Local<ObjectTemplate> New();$/;"	p	class:v8::ObjectTemplate	access:public	signature:()
v8::ObjectTemplate::New	/usr/include/v8/v8.h	/^  static Local<ObjectTemplate> New(Handle<FunctionTemplate> constructor);$/;"	p	class:v8::ObjectTemplate	access:private	signature:(Handle<FunctionTemplate> constructor)
v8::ObjectTemplate::NewInstance	/usr/include/v8/v8.h	/^  Local<Object> NewInstance();$/;"	p	class:v8::ObjectTemplate	access:public	signature:()
v8::ObjectTemplate::ObjectTemplate	/usr/include/v8/v8.h	/^  ObjectTemplate();$/;"	p	class:v8::ObjectTemplate	access:private	signature:()
v8::ObjectTemplate::SetAccessCheckCallbacks	/usr/include/v8/v8.h	/^  void SetAccessCheckCallbacks(NamedSecurityCallback named_handler,$/;"	p	class:v8::ObjectTemplate	access:public	signature:(NamedSecurityCallback named_handler, IndexedSecurityCallback indexed_handler, Handle<Value> data = Handle<Value>(), bool turned_on_by_default = true)
v8::ObjectTemplate::SetAccessor	/usr/include/v8/v8.h	/^  void SetAccessor(Handle<String> name,$/;"	p	class:v8::ObjectTemplate	access:public	signature:(Handle<String> name, AccessorGetter getter, AccessorSetter setter = 0, Handle<Value> data = Handle<Value>(), AccessControl settings = DEFAULT, PropertyAttribute attribute = None)
v8::ObjectTemplate::SetCallAsFunctionHandler	/usr/include/v8/v8.h	/^  void SetCallAsFunctionHandler(InvocationCallback callback,$/;"	p	class:v8::ObjectTemplate	access:public	signature:(InvocationCallback callback, Handle<Value> data = Handle<Value>())
v8::ObjectTemplate::SetIndexedPropertyHandler	/usr/include/v8/v8.h	/^  void SetIndexedPropertyHandler(IndexedPropertyGetter getter,$/;"	p	class:v8::ObjectTemplate	access:public	signature:(IndexedPropertyGetter getter, IndexedPropertySetter setter = 0, IndexedPropertyQuery query = 0, IndexedPropertyDeleter deleter = 0, IndexedPropertyEnumerator enumerator = 0, Handle<Value> data = Handle<Value>())
v8::ObjectTemplate::SetInternalFieldCount	/usr/include/v8/v8.h	/^  void SetInternalFieldCount(int value);$/;"	p	class:v8::ObjectTemplate	access:public	signature:(int value)
v8::ObjectTemplate::SetNamedPropertyHandler	/usr/include/v8/v8.h	/^  void SetNamedPropertyHandler(NamedPropertyGetter getter,$/;"	p	class:v8::ObjectTemplate	access:public	signature:(NamedPropertyGetter getter, NamedPropertySetter setter = 0, NamedPropertyQuery query = 0, NamedPropertyDeleter deleter = 0, NamedPropertyEnumerator enumerator = 0, Handle<Value> data = Handle<Value>())
v8::PROFILER_MODULE_CPU	/usr/include/v8/v8.h	/^  PROFILER_MODULE_CPU             = 1,$/;"	e	enum:v8::ProfilerModules
v8::PROFILER_MODULE_HEAP_SNAPSHOT	/usr/include/v8/v8.h	/^  PROFILER_MODULE_HEAP_SNAPSHOT   = 1 << 16$/;"	e	enum:v8::ProfilerModules
v8::PROFILER_MODULE_HEAP_STATS	/usr/include/v8/v8.h	/^  PROFILER_MODULE_HEAP_STATS      = 1 << 1,$/;"	e	enum:v8::ProfilerModules
v8::PROFILER_MODULE_JS_CONSTRUCTORS	/usr/include/v8/v8.h	/^  PROFILER_MODULE_JS_CONSTRUCTORS = 1 << 2,$/;"	e	enum:v8::ProfilerModules
v8::PROFILER_MODULE_NONE	/usr/include/v8/v8.h	/^  PROFILER_MODULE_NONE            = 0,$/;"	e	enum:v8::ProfilerModules
v8::PROHIBITS_OVERWRITING	/usr/include/v8/v8.h	/^  PROHIBITS_OVERWRITING = 1 << 2$/;"	e	enum:v8::AccessControl
v8::Persistent	/usr/include/v8/v8.h	/^template <class T> class V8EXPORT_INLINE Persistent : public Handle<T> {$/;"	c	namespace:v8	inherits:Handle
v8::Persistent::Cast	/usr/include/v8/v8.h	/^  template <class S> static inline Persistent<T> Cast(Persistent<S> that) {$/;"	f	class:v8::Persistent	access:public	signature:(Persistent<S> that)
v8::Persistent::ClearWeak	/usr/include/v8/v8.h	/^  inline void ClearWeak();$/;"	p	class:v8::Persistent	access:public	signature:()
v8::Persistent::ClearWeak	/usr/include/v8/v8.h	/^void Persistent<T>::ClearWeak() {$/;"	f	class:v8::Persistent	signature:()
v8::Persistent::Dispose	/usr/include/v8/v8.h	/^  inline void Dispose();$/;"	p	class:v8::Persistent	access:public	signature:()
v8::Persistent::Dispose	/usr/include/v8/v8.h	/^void Persistent<T>::Dispose() {$/;"	f	class:v8::Persistent	signature:()
v8::Persistent::IsNearDeath	/usr/include/v8/v8.h	/^  inline bool IsNearDeath() const;$/;"	p	class:v8::Persistent	access:public	signature:() const
v8::Persistent::IsNearDeath	/usr/include/v8/v8.h	/^bool Persistent<T>::IsNearDeath() const {$/;"	f	class:v8::Persistent	signature:() const
v8::Persistent::IsWeak	/usr/include/v8/v8.h	/^  inline bool IsWeak() const;$/;"	p	class:v8::Persistent	access:public	signature:() const
v8::Persistent::IsWeak	/usr/include/v8/v8.h	/^bool Persistent<T>::IsWeak() const {$/;"	f	class:v8::Persistent	signature:() const
v8::Persistent::MakeWeak	/usr/include/v8/v8.h	/^  inline void MakeWeak(void* parameters, WeakReferenceCallback callback);$/;"	p	class:v8::Persistent	access:public	signature:(void* parameters, WeakReferenceCallback callback)
v8::Persistent::MakeWeak	/usr/include/v8/v8.h	/^void Persistent<T>::MakeWeak(void* parameters, WeakReferenceCallback callback) {$/;"	f	class:v8::Persistent	signature:(void* parameters, WeakReferenceCallback callback)
v8::Persistent::New	/usr/include/v8/v8.h	/^  inline static Persistent<T> New(Handle<T> that);$/;"	p	class:v8::Persistent	access:public	signature:(Handle<T> that)
v8::Persistent::New	/usr/include/v8/v8.h	/^Persistent<T> Persistent<T>::New(Handle<T> that) {$/;"	f	class:v8::Persistent	signature:(Handle<T> that)
v8::Persistent::Persistent	/usr/include/v8/v8.h	/^  inline Persistent();$/;"	p	class:v8::Persistent	access:public	signature:()
v8::Persistent::Persistent	/usr/include/v8/v8.h	/^  template <class S> explicit inline Persistent(Handle<S> that)$/;"	f	class:v8::Persistent	access:public	signature:(Handle<S> that)
v8::Persistent::Persistent	/usr/include/v8/v8.h	/^  template <class S> inline Persistent(Persistent<S> that)$/;"	f	class:v8::Persistent	access:public	signature:(Persistent<S> that)
v8::Persistent::Persistent	/usr/include/v8/v8.h	/^  template <class S> inline Persistent(S* that) : Handle<T>(that) { }$/;"	f	class:v8::Persistent	access:public	signature:(S* that)
v8::Persistent::Persistent	/usr/include/v8/v8.h	/^Persistent<T>::Persistent() : Handle<T>() { }$/;"	f	class:v8::Persistent	signature:()
v8::Primitive	/usr/include/v8/v8.h	/^class V8EXPORT Primitive : public Value { };$/;"	c	namespace:v8	inherits:Value
v8::ProfilerModules	/usr/include/v8/v8.h	/^enum ProfilerModules {$/;"	g	namespace:v8
v8::PropertyAttribute	/usr/include/v8/v8.h	/^enum PropertyAttribute {$/;"	g	namespace:v8
v8::ReadOnly	/usr/include/v8/v8.h	/^  ReadOnly   = 1 << 0,$/;"	e	enum:v8::PropertyAttribute
v8::RegisterExtension	/usr/include/v8/v8.h	/^void V8EXPORT RegisterExtension(Extension* extension);$/;"	p	namespace:v8	signature:(Extension* extension)
v8::ResourceConstraints	/usr/include/v8/v8.h	/^class V8EXPORT ResourceConstraints {$/;"	c	namespace:v8
v8::ResourceConstraints::ResourceConstraints	/usr/include/v8/v8.h	/^  ResourceConstraints();$/;"	p	class:v8::ResourceConstraints	access:public	signature:()
v8::ResourceConstraints::max_old_space_size	/usr/include/v8/v8.h	/^  int max_old_space_size() const { return max_old_space_size_; }$/;"	f	class:v8::ResourceConstraints	access:public	signature:() const
v8::ResourceConstraints::max_old_space_size_	/usr/include/v8/v8.h	/^  int max_old_space_size_;$/;"	m	class:v8::ResourceConstraints	access:private
v8::ResourceConstraints::max_young_space_size	/usr/include/v8/v8.h	/^  int max_young_space_size() const { return max_young_space_size_; }$/;"	f	class:v8::ResourceConstraints	access:public	signature:() const
v8::ResourceConstraints::max_young_space_size_	/usr/include/v8/v8.h	/^  int max_young_space_size_;$/;"	m	class:v8::ResourceConstraints	access:private
v8::ResourceConstraints::set_max_old_space_size	/usr/include/v8/v8.h	/^  void set_max_old_space_size(int value) { max_old_space_size_ = value; }$/;"	f	class:v8::ResourceConstraints	access:public	signature:(int value)
v8::ResourceConstraints::set_max_young_space_size	/usr/include/v8/v8.h	/^  void set_max_young_space_size(int value) { max_young_space_size_ = value; }$/;"	f	class:v8::ResourceConstraints	access:public	signature:(int value)
v8::ResourceConstraints::set_stack_limit	/usr/include/v8/v8.h	/^  void set_stack_limit(uint32_t* value) { stack_limit_ = value; }$/;"	f	class:v8::ResourceConstraints	access:public	signature:(uint32_t* value)
v8::ResourceConstraints::stack_limit	/usr/include/v8/v8.h	/^  uint32_t* stack_limit() const { return stack_limit_; }$/;"	f	class:v8::ResourceConstraints	access:public	signature:() const
v8::ResourceConstraints::stack_limit_	/usr/include/v8/v8.h	/^  uint32_t* stack_limit_;$/;"	m	class:v8::ResourceConstraints	access:private
v8::Script	/usr/include/v8/v8.h	/^class V8EXPORT Script {$/;"	c	namespace:v8
v8::Script::Compile	/usr/include/v8/v8.h	/^  static Local<Script> Compile(Handle<String> source,$/;"	p	class:v8::Script	access:public	signature:(Handle<String> source, Handle<Value> file_name)
v8::Script::Compile	/usr/include/v8/v8.h	/^  static Local<Script> Compile(Handle<String> source,$/;"	p	class:v8::Script	access:public	signature:(Handle<String> source, ScriptOrigin* origin = NULL, ScriptData* pre_data = NULL)
v8::Script::Id	/usr/include/v8/v8.h	/^  Local<Value> Id();$/;"	p	class:v8::Script	access:public	signature:()
v8::Script::New	/usr/include/v8/v8.h	/^   static Local<Script> New(Handle<String> source,$/;"	p	class:v8::Script	access:public	signature:(Handle<String> source, Handle<Value> file_name)
v8::Script::New	/usr/include/v8/v8.h	/^   static Local<Script> New(Handle<String> source,$/;"	p	class:v8::Script	access:public	signature:(Handle<String> source, ScriptOrigin* origin = NULL, ScriptData* pre_data = NULL)
v8::Script::Run	/usr/include/v8/v8.h	/^  Local<Value> Run();$/;"	p	class:v8::Script	access:public	signature:()
v8::Script::SetData	/usr/include/v8/v8.h	/^  void SetData(Handle<String> data);$/;"	p	class:v8::Script	access:public	signature:(Handle<String> data)
v8::ScriptCollected	/usr/include/v8/v8-debug.h	/^  ScriptCollected = 6$/;"	e	enum:v8::DebugEvent
v8::ScriptData	/usr/include/v8/v8.h	/^class V8EXPORT ScriptData {  \/\/ NOLINT$/;"	c	namespace:v8
v8::ScriptData::Data	/usr/include/v8/v8.h	/^  virtual unsigned* Data() = 0;$/;"	p	class:v8::ScriptData	access:public	signature:()
v8::ScriptData::HasError	/usr/include/v8/v8.h	/^  virtual bool HasError() = 0;$/;"	p	class:v8::ScriptData	access:public	signature:()
v8::ScriptData::Length	/usr/include/v8/v8.h	/^  virtual int Length() = 0;$/;"	p	class:v8::ScriptData	access:public	signature:()
v8::ScriptData::New	/usr/include/v8/v8.h	/^  static ScriptData* New(unsigned* data, int length);$/;"	p	class:v8::ScriptData	access:public	signature:(unsigned* data, int length)
v8::ScriptData::PreCompile	/usr/include/v8/v8.h	/^  static ScriptData* PreCompile(const char* input, int length);$/;"	p	class:v8::ScriptData	access:public	signature:(const char* input, int length)
v8::ScriptData::~ScriptData	/usr/include/v8/v8.h	/^  virtual ~ScriptData() { }$/;"	f	class:v8::ScriptData	access:public	signature:()
v8::ScriptOrigin	/usr/include/v8/v8.h	/^class V8EXPORT ScriptOrigin {$/;"	c	namespace:v8
v8::ScriptOrigin::ResourceColumnOffset	/usr/include/v8/v8.h	/^  inline Handle<Integer> ResourceColumnOffset() const;$/;"	p	class:v8::ScriptOrigin	access:public	signature:() const
v8::ScriptOrigin::ResourceColumnOffset	/usr/include/v8/v8.h	/^Handle<Integer> ScriptOrigin::ResourceColumnOffset() const {$/;"	f	class:v8::ScriptOrigin	signature:() const
v8::ScriptOrigin::ResourceLineOffset	/usr/include/v8/v8.h	/^  inline Handle<Integer> ResourceLineOffset() const;$/;"	p	class:v8::ScriptOrigin	access:public	signature:() const
v8::ScriptOrigin::ResourceLineOffset	/usr/include/v8/v8.h	/^Handle<Integer> ScriptOrigin::ResourceLineOffset() const {$/;"	f	class:v8::ScriptOrigin	signature:() const
v8::ScriptOrigin::ResourceName	/usr/include/v8/v8.h	/^  inline Handle<Value> ResourceName() const;$/;"	p	class:v8::ScriptOrigin	access:public	signature:() const
v8::ScriptOrigin::ResourceName	/usr/include/v8/v8.h	/^Handle<Value> ScriptOrigin::ResourceName() const {$/;"	f	class:v8::ScriptOrigin	signature:() const
v8::ScriptOrigin::ScriptOrigin	/usr/include/v8/v8.h	/^  ScriptOrigin(Handle<Value> resource_name,$/;"	f	class:v8::ScriptOrigin	access:public	signature:(Handle<Value> resource_name, Handle<Integer> resource_line_offset = Handle<Integer>(), Handle<Integer> resource_column_offset = Handle<Integer>())
v8::ScriptOrigin::resource_column_offset_	/usr/include/v8/v8.h	/^  Handle<Integer> resource_column_offset_;$/;"	m	class:v8::ScriptOrigin	access:private
v8::ScriptOrigin::resource_line_offset_	/usr/include/v8/v8.h	/^  Handle<Integer> resource_line_offset_;$/;"	m	class:v8::ScriptOrigin	access:private
v8::ScriptOrigin::resource_name_	/usr/include/v8/v8.h	/^  Handle<Value> resource_name_;$/;"	m	class:v8::ScriptOrigin	access:private
v8::SetResourceConstraints	/usr/include/v8/v8.h	/^bool SetResourceConstraints(ResourceConstraints* constraints);$/;"	p	namespace:v8	signature:(ResourceConstraints* constraints)
v8::Signature	/usr/include/v8/v8.h	/^class V8EXPORT Signature : public Data {$/;"	c	namespace:v8	inherits:Data
v8::Signature::New	/usr/include/v8/v8.h	/^  static Local<Signature> New(Handle<FunctionTemplate> receiver =$/;"	p	class:v8::Signature	access:public	signature:(Handle<FunctionTemplate> receiver = Handle<FunctionTemplate>(), int argc = 0, Handle<FunctionTemplate> argv[] = 0)
v8::Signature::Signature	/usr/include/v8/v8.h	/^  Signature();$/;"	p	class:v8::Signature	access:private	signature:()
v8::String	/usr/include/v8/v8.h	/^class V8EXPORT String : public Primitive {$/;"	c	namespace:v8	inherits:Primitive
v8::String::AsciiValue	/usr/include/v8/v8.h	/^  class V8EXPORT AsciiValue {$/;"	c	class:v8::String	access:public
v8::String::AsciiValue::AsciiValue	/usr/include/v8/v8.h	/^    AsciiValue(const AsciiValue&);$/;"	p	class:v8::String::AsciiValue	access:private	signature:(const AsciiValue&)
v8::String::AsciiValue::AsciiValue	/usr/include/v8/v8.h	/^    explicit AsciiValue(Handle<v8::Value> obj);$/;"	p	class:v8::String::AsciiValue	access:public	signature:(Handle<v8::Value> obj)
v8::String::AsciiValue::length	/usr/include/v8/v8.h	/^    int length() const { return length_; }$/;"	f	class:v8::String::AsciiValue	access:public	signature:() const
v8::String::AsciiValue::length_	/usr/include/v8/v8.h	/^    int length_;$/;"	m	class:v8::String::AsciiValue	access:private
v8::String::AsciiValue::operator *	/usr/include/v8/v8.h	/^    char* operator*() { return str_; }$/;"	f	class:v8::String::AsciiValue	access:public	signature:()
v8::String::AsciiValue::operator *	/usr/include/v8/v8.h	/^    const char* operator*() const { return str_; }$/;"	f	class:v8::String::AsciiValue	access:public	signature:() const
v8::String::AsciiValue::operator =	/usr/include/v8/v8.h	/^    void operator=(const AsciiValue&);$/;"	p	class:v8::String::AsciiValue	access:private	signature:(const AsciiValue&)
v8::String::AsciiValue::str_	/usr/include/v8/v8.h	/^    char* str_;$/;"	m	class:v8::String::AsciiValue	access:private
v8::String::AsciiValue::~AsciiValue	/usr/include/v8/v8.h	/^    ~AsciiValue();$/;"	p	class:v8::String::AsciiValue	access:public	signature:()
v8::String::CanMakeExternal	/usr/include/v8/v8.h	/^  bool CanMakeExternal();$/;"	p	class:v8::String	access:public	signature:()
v8::String::Cast	/usr/include/v8/v8.h	/^  static inline String* Cast(v8::Value* obj);$/;"	p	class:v8::String	access:public	signature:(v8::Value* obj)
v8::String::Cast	/usr/include/v8/v8.h	/^String* String::Cast(v8::Value* value) {$/;"	f	class:v8::String	signature:(v8::Value* value)
v8::String::CheckCast	/usr/include/v8/v8.h	/^  static void CheckCast(v8::Value* obj);$/;"	p	class:v8::String	access:private	signature:(v8::Value* obj)
v8::String::Concat	/usr/include/v8/v8.h	/^  static Local<String> Concat(Handle<String> left, Handle<String>right);$/;"	p	class:v8::String	access:public	signature:(Handle<String> left, Handle<String>right)
v8::String::Empty	/usr/include/v8/v8.h	/^  static v8::Local<v8::String> Empty();$/;"	p	class:v8::String	access:public	signature:()
v8::String::ExternalAsciiStringResource	/usr/include/v8/v8.h	/^  class V8EXPORT ExternalAsciiStringResource$/;"	c	class:v8::String	inherits:ExternalStringResourceBase	access:public
v8::String::ExternalAsciiStringResource::ExternalAsciiStringResource	/usr/include/v8/v8.h	/^    ExternalAsciiStringResource() {}$/;"	f	class:v8::String::ExternalAsciiStringResource	access:protected	signature:()
v8::String::ExternalAsciiStringResource::data	/usr/include/v8/v8.h	/^    virtual const char* data() const = 0;$/;"	p	class:v8::String::ExternalAsciiStringResource	access:public	signature:() const
v8::String::ExternalAsciiStringResource::length	/usr/include/v8/v8.h	/^    virtual size_t length() const = 0;$/;"	p	class:v8::String::ExternalAsciiStringResource	access:public	signature:() const
v8::String::ExternalAsciiStringResource::~ExternalAsciiStringResource	/usr/include/v8/v8.h	/^    virtual ~ExternalAsciiStringResource() {}$/;"	f	class:v8::String::ExternalAsciiStringResource	access:public	signature:()
v8::String::ExternalStringResource	/usr/include/v8/v8.h	/^  class V8EXPORT ExternalStringResource$/;"	c	class:v8::String	inherits:ExternalStringResourceBase	access:public
v8::String::ExternalStringResource::ExternalStringResource	/usr/include/v8/v8.h	/^    ExternalStringResource() {}$/;"	f	class:v8::String::ExternalStringResource	access:protected	signature:()
v8::String::ExternalStringResource::data	/usr/include/v8/v8.h	/^    virtual const uint16_t* data() const = 0;$/;"	p	class:v8::String::ExternalStringResource	access:public	signature:() const
v8::String::ExternalStringResource::length	/usr/include/v8/v8.h	/^    virtual size_t length() const = 0;$/;"	p	class:v8::String::ExternalStringResource	access:public	signature:() const
v8::String::ExternalStringResource::~ExternalStringResource	/usr/include/v8/v8.h	/^    virtual ~ExternalStringResource() {}$/;"	f	class:v8::String::ExternalStringResource	access:public	signature:()
v8::String::ExternalStringResourceBase	/usr/include/v8/v8.h	/^  class V8EXPORT ExternalStringResourceBase {$/;"	c	class:v8::String	access:public
v8::String::ExternalStringResourceBase::ExternalStringResourceBase	/usr/include/v8/v8.h	/^    ExternalStringResourceBase() {}$/;"	f	class:v8::String::ExternalStringResourceBase	access:protected	signature:()
v8::String::ExternalStringResourceBase::ExternalStringResourceBase	/usr/include/v8/v8.h	/^    ExternalStringResourceBase(const ExternalStringResourceBase&);$/;"	p	class:v8::String::ExternalStringResourceBase	access:private	signature:(const ExternalStringResourceBase&)
v8::String::ExternalStringResourceBase::operator =	/usr/include/v8/v8.h	/^    void operator=(const ExternalStringResourceBase&);$/;"	p	class:v8::String::ExternalStringResourceBase	access:private	signature:(const ExternalStringResourceBase&)
v8::String::ExternalStringResourceBase::~ExternalStringResourceBase	/usr/include/v8/v8.h	/^    virtual ~ExternalStringResourceBase() {}$/;"	f	class:v8::String::ExternalStringResourceBase	access:public	signature:()
v8::String::GetExternalAsciiStringResource	/usr/include/v8/v8.h	/^  ExternalAsciiStringResource* GetExternalAsciiStringResource() const;$/;"	p	class:v8::String	access:public	signature:() const
v8::String::GetExternalStringResource	/usr/include/v8/v8.h	/^  inline ExternalStringResource* GetExternalStringResource() const;$/;"	p	class:v8::String	access:public	signature:() const
v8::String::GetExternalStringResource	/usr/include/v8/v8.h	/^String::ExternalStringResource* String::GetExternalStringResource() const {$/;"	f	class:v8::String	signature:() const
v8::String::IsExternal	/usr/include/v8/v8.h	/^  bool IsExternal() const;$/;"	p	class:v8::String	access:public	signature:() const
v8::String::IsExternalAscii	/usr/include/v8/v8.h	/^  bool IsExternalAscii() const;$/;"	p	class:v8::String	access:public	signature:() const
v8::String::Length	/usr/include/v8/v8.h	/^  int Length() const;$/;"	p	class:v8::String	access:public	signature:() const
v8::String::MakeExternal	/usr/include/v8/v8.h	/^  bool MakeExternal(ExternalAsciiStringResource* resource);$/;"	p	class:v8::String	access:public	signature:(ExternalAsciiStringResource* resource)
v8::String::MakeExternal	/usr/include/v8/v8.h	/^  bool MakeExternal(ExternalStringResource* resource);$/;"	p	class:v8::String	access:public	signature:(ExternalStringResource* resource)
v8::String::New	/usr/include/v8/v8.h	/^  static Local<String> New(const char* data, int length = -1);$/;"	p	class:v8::String	access:public	signature:(const char* data, int length = -1)
v8::String::New	/usr/include/v8/v8.h	/^  static Local<String> New(const uint16_t* data, int length = -1);$/;"	p	class:v8::String	access:public	signature:(const uint16_t* data, int length = -1)
v8::String::NewExternal	/usr/include/v8/v8.h	/^  static Local<String> NewExternal(ExternalAsciiStringResource* resource);$/;"	p	class:v8::String	access:public	signature:(ExternalAsciiStringResource* resource)
v8::String::NewExternal	/usr/include/v8/v8.h	/^  static Local<String> NewExternal(ExternalStringResource* resource);$/;"	p	class:v8::String	access:public	signature:(ExternalStringResource* resource)
v8::String::NewSymbol	/usr/include/v8/v8.h	/^  static Local<String> NewSymbol(const char* data, int length = -1);$/;"	p	class:v8::String	access:public	signature:(const char* data, int length = -1)
v8::String::NewUndetectable	/usr/include/v8/v8.h	/^  static Local<String> NewUndetectable(const char* data, int length = -1);$/;"	p	class:v8::String	access:public	signature:(const char* data, int length = -1)
v8::String::NewUndetectable	/usr/include/v8/v8.h	/^  static Local<String> NewUndetectable(const uint16_t* data, int length = -1);$/;"	p	class:v8::String	access:public	signature:(const uint16_t* data, int length = -1)
v8::String::Utf8Length	/usr/include/v8/v8.h	/^  int Utf8Length() const;$/;"	p	class:v8::String	access:public	signature:() const
v8::String::Utf8Value	/usr/include/v8/v8.h	/^  class V8EXPORT Utf8Value {$/;"	c	class:v8::String	access:public
v8::String::Utf8Value::Utf8Value	/usr/include/v8/v8.h	/^    Utf8Value(const Utf8Value&);$/;"	p	class:v8::String::Utf8Value	access:private	signature:(const Utf8Value&)
v8::String::Utf8Value::Utf8Value	/usr/include/v8/v8.h	/^    explicit Utf8Value(Handle<v8::Value> obj);$/;"	p	class:v8::String::Utf8Value	access:public	signature:(Handle<v8::Value> obj)
v8::String::Utf8Value::length	/usr/include/v8/v8.h	/^    int length() const { return length_; }$/;"	f	class:v8::String::Utf8Value	access:public	signature:() const
v8::String::Utf8Value::length_	/usr/include/v8/v8.h	/^    int length_;$/;"	m	class:v8::String::Utf8Value	access:private
v8::String::Utf8Value::operator *	/usr/include/v8/v8.h	/^    char* operator*() { return str_; }$/;"	f	class:v8::String::Utf8Value	access:public	signature:()
v8::String::Utf8Value::operator *	/usr/include/v8/v8.h	/^    const char* operator*() const { return str_; }$/;"	f	class:v8::String::Utf8Value	access:public	signature:() const
v8::String::Utf8Value::operator =	/usr/include/v8/v8.h	/^    void operator=(const Utf8Value&);$/;"	p	class:v8::String::Utf8Value	access:private	signature:(const Utf8Value&)
v8::String::Utf8Value::str_	/usr/include/v8/v8.h	/^    char* str_;$/;"	m	class:v8::String::Utf8Value	access:private
v8::String::Utf8Value::~Utf8Value	/usr/include/v8/v8.h	/^    ~Utf8Value();$/;"	p	class:v8::String::Utf8Value	access:public	signature:()
v8::String::Value	/usr/include/v8/v8.h	/^  class V8EXPORT Value {$/;"	c	class:v8::String	access:public
v8::String::Value::Value	/usr/include/v8/v8.h	/^    Value(const Value&);$/;"	p	class:v8::String::Value	access:private	signature:(const Value&)
v8::String::Value::Value	/usr/include/v8/v8.h	/^    explicit Value(Handle<v8::Value> obj);$/;"	p	class:v8::String::Value	access:public	signature:(Handle<v8::Value> obj)
v8::String::Value::length	/usr/include/v8/v8.h	/^    int length() const { return length_; }$/;"	f	class:v8::String::Value	access:public	signature:() const
v8::String::Value::length_	/usr/include/v8/v8.h	/^    int length_;$/;"	m	class:v8::String::Value	access:private
v8::String::Value::operator *	/usr/include/v8/v8.h	/^    const uint16_t* operator*() const { return str_; }$/;"	f	class:v8::String::Value	access:public	signature:() const
v8::String::Value::operator *	/usr/include/v8/v8.h	/^    uint16_t* operator*() { return str_; }$/;"	f	class:v8::String::Value	access:public	signature:()
v8::String::Value::operator =	/usr/include/v8/v8.h	/^    void operator=(const Value&);$/;"	p	class:v8::String::Value	access:private	signature:(const Value&)
v8::String::Value::str_	/usr/include/v8/v8.h	/^    uint16_t* str_;$/;"	m	class:v8::String::Value	access:private
v8::String::Value::~Value	/usr/include/v8/v8.h	/^    ~Value();$/;"	p	class:v8::String::Value	access:public	signature:()
v8::String::VerifyExternalStringResource	/usr/include/v8/v8.h	/^  void VerifyExternalStringResource(ExternalStringResource* val) const;$/;"	p	class:v8::String	access:private	signature:(ExternalStringResource* val) const
v8::String::Write	/usr/include/v8/v8.h	/^  int Write(uint16_t* buffer, int start = 0, int length = -1) const;  \/\/ UTF-16$/;"	p	class:v8::String	access:public	signature:(uint16_t* buffer, int start = 0, int length = -1) const
v8::String::WriteAscii	/usr/include/v8/v8.h	/^  int WriteAscii(char* buffer, int start = 0, int length = -1) const;  \/\/ ASCII$/;"	p	class:v8::String	access:public	signature:(char* buffer, int start = 0, int length = -1) const
v8::String::WriteUtf8	/usr/include/v8/v8.h	/^  int WriteUtf8(char* buffer, int length = -1) const; \/\/ UTF-8$/;"	p	class:v8::String	access:public	signature:(char* buffer, int length = -1) const
v8::Template	/usr/include/v8/v8.h	/^class V8EXPORT Template : public Data {$/;"	c	namespace:v8	inherits:Data
v8::Template::Set	/usr/include/v8/v8.h	/^  inline void Set(const char* name, Handle<Data> value);$/;"	p	class:v8::Template	access:public	signature:(const char* name, Handle<Data> value)
v8::Template::Set	/usr/include/v8/v8.h	/^  void Set(Handle<String> name, Handle<Data> value,$/;"	p	class:v8::Template	access:public	signature:(Handle<String> name, Handle<Data> value, PropertyAttribute attributes = None)
v8::Template::Set	/usr/include/v8/v8.h	/^void Template::Set(const char* name, v8::Handle<Data> value) {$/;"	f	class:v8::Template	signature:(const char* name, v8::Handle<Data> value)
v8::Template::Template	/usr/include/v8/v8.h	/^  Template();$/;"	p	class:v8::Template	access:private	signature:()
v8::ThrowException	/usr/include/v8/v8.h	/^Handle<Value> V8EXPORT ThrowException(Handle<Value> exception);$/;"	p	namespace:v8	signature:(Handle<Value> exception)
v8::True	/usr/include/v8/v8.h	/^Handle<Boolean> V8EXPORT True();$/;"	p	namespace:v8	signature:()
v8::TryCatch	/usr/include/v8/v8.h	/^class V8EXPORT TryCatch {$/;"	c	namespace:v8
v8::TryCatch::CanContinue	/usr/include/v8/v8.h	/^  bool CanContinue() const;$/;"	p	class:v8::TryCatch	access:public	signature:() const
v8::TryCatch::Exception	/usr/include/v8/v8.h	/^  Local<Value> Exception() const;$/;"	p	class:v8::TryCatch	access:public	signature:() const
v8::TryCatch::HasCaught	/usr/include/v8/v8.h	/^  bool HasCaught() const;$/;"	p	class:v8::TryCatch	access:public	signature:() const
v8::TryCatch::Message	/usr/include/v8/v8.h	/^  Local<v8::Message> Message() const;$/;"	p	class:v8::TryCatch	access:public	signature:() const
v8::TryCatch::ReThrow	/usr/include/v8/v8.h	/^  Handle<Value> ReThrow();$/;"	p	class:v8::TryCatch	access:public	signature:()
v8::TryCatch::Reset	/usr/include/v8/v8.h	/^  void Reset();$/;"	p	class:v8::TryCatch	access:public	signature:()
v8::TryCatch::SetCaptureMessage	/usr/include/v8/v8.h	/^  void SetCaptureMessage(bool value);$/;"	p	class:v8::TryCatch	access:public	signature:(bool value)
v8::TryCatch::SetVerbose	/usr/include/v8/v8.h	/^  void SetVerbose(bool value);$/;"	p	class:v8::TryCatch	access:public	signature:(bool value)
v8::TryCatch::StackTrace	/usr/include/v8/v8.h	/^  Local<Value> StackTrace() const;$/;"	p	class:v8::TryCatch	access:public	signature:() const
v8::TryCatch::TryCatch	/usr/include/v8/v8.h	/^  TryCatch();$/;"	p	class:v8::TryCatch	access:public	signature:()
v8::TryCatch::exception_	/usr/include/v8/v8.h	/^  void* exception_;$/;"	m	class:v8::TryCatch	access:private
v8::TryCatch::message_	/usr/include/v8/v8.h	/^  void* message_;$/;"	m	class:v8::TryCatch	access:private
v8::TryCatch::next_	/usr/include/v8/v8.h	/^  void* next_;$/;"	m	class:v8::TryCatch	access:private
v8::TryCatch::~TryCatch	/usr/include/v8/v8.h	/^  ~TryCatch();$/;"	p	class:v8::TryCatch	access:public	signature:()
v8::TypeSwitch	/usr/include/v8/v8.h	/^class V8EXPORT TypeSwitch : public Data {$/;"	c	namespace:v8	inherits:Data
v8::TypeSwitch::New	/usr/include/v8/v8.h	/^  static Local<TypeSwitch> New(Handle<FunctionTemplate> type);$/;"	p	class:v8::TypeSwitch	access:public	signature:(Handle<FunctionTemplate> type)
v8::TypeSwitch::New	/usr/include/v8/v8.h	/^  static Local<TypeSwitch> New(int argc, Handle<FunctionTemplate> types[]);$/;"	p	class:v8::TypeSwitch	access:public	signature:(int argc, Handle<FunctionTemplate> types[])
v8::TypeSwitch::TypeSwitch	/usr/include/v8/v8.h	/^  TypeSwitch();$/;"	p	class:v8::TypeSwitch	access:private	signature:()
v8::TypeSwitch::match	/usr/include/v8/v8.h	/^  int match(Handle<Value> value);$/;"	p	class:v8::TypeSwitch	access:public	signature:(Handle<Value> value)
v8::Uint32	/usr/include/v8/v8.h	/^class V8EXPORT Uint32 : public Integer {$/;"	c	namespace:v8	inherits:Integer
v8::Uint32::Uint32	/usr/include/v8/v8.h	/^  Uint32();$/;"	p	class:v8::Uint32	access:private	signature:()
v8::Uint32::Value	/usr/include/v8/v8.h	/^  uint32_t Value() const;$/;"	p	class:v8::Uint32	access:public	signature:() const
v8::Undefined	/usr/include/v8/v8.h	/^Handle<Primitive> V8EXPORT Undefined();$/;"	p	namespace:v8	signature:()
v8::Unlocker	/usr/include/v8/v8.h	/^class V8EXPORT Unlocker {$/;"	c	namespace:v8
v8::Unlocker::Unlocker	/usr/include/v8/v8.h	/^  Unlocker();$/;"	p	class:v8::Unlocker	access:public	signature:()
v8::Unlocker::~Unlocker	/usr/include/v8/v8.h	/^  ~Unlocker();$/;"	p	class:v8::Unlocker	access:public	signature:()
v8::V8	/usr/include/v8/v8.h	/^class V8EXPORT V8 {$/;"	c	namespace:v8
v8::V8::AddMessageListener	/usr/include/v8/v8.h	/^  static bool AddMessageListener(MessageCallback that,$/;"	p	class:v8::V8	access:public	signature:(MessageCallback that, Handle<Value> data = Handle<Value>())
v8::V8::AddObjectGroup	/usr/include/v8/v8.h	/^  static void AddObjectGroup(Persistent<Value>* objects, size_t length);$/;"	p	class:v8::V8	access:public	signature:(Persistent<Value>* objects, size_t length)
v8::V8::AdjustAmountOfExternalAllocatedMemory	/usr/include/v8/v8.h	/^  static int AdjustAmountOfExternalAllocatedMemory(int change_in_bytes);$/;"	p	class:v8::V8	access:public	signature:(int change_in_bytes)
v8::V8::ClearWeak	/usr/include/v8/v8.h	/^  static void ClearWeak(internal::Object** global_handle);$/;"	p	class:v8::V8	access:private	signature:(internal::Object** global_handle)
v8::V8::Dispose	/usr/include/v8/v8.h	/^  static bool Dispose();$/;"	p	class:v8::V8	access:public	signature:()
v8::V8::DisposeGlobal	/usr/include/v8/v8.h	/^  static void DisposeGlobal(internal::Object** global_handle);$/;"	p	class:v8::V8	access:private	signature:(internal::Object** global_handle)
v8::V8::EnableSlidingStateWindow	/usr/include/v8/v8.h	/^  static void EnableSlidingStateWindow();$/;"	p	class:v8::V8	access:public	signature:()
v8::V8::GetActiveProfilerModules	/usr/include/v8/v8.h	/^  static int GetActiveProfilerModules();$/;"	p	class:v8::V8	access:public	signature:()
v8::V8::GetCurrentThreadId	/usr/include/v8/v8.h	/^  static int GetCurrentThreadId();$/;"	p	class:v8::V8	access:public	signature:()
v8::V8::GetHeapStatistics	/usr/include/v8/v8.h	/^  static void GetHeapStatistics(HeapStatistics* heap_statistics);$/;"	p	class:v8::V8	access:public	signature:(HeapStatistics* heap_statistics)
v8::V8::GetLogLines	/usr/include/v8/v8.h	/^  static int GetLogLines(int from_pos, char* dest_buf, int max_size);$/;"	p	class:v8::V8	access:public	signature:(int from_pos, char* dest_buf, int max_size)
v8::V8::GetVersion	/usr/include/v8/v8.h	/^  static const char* GetVersion();$/;"	p	class:v8::V8	access:public	signature:()
v8::V8::GlobalizeReference	/usr/include/v8/v8.h	/^  static internal::Object** GlobalizeReference(internal::Object** handle);$/;"	p	class:v8::V8	access:private	signature:(internal::Object** handle)
v8::V8::IdleNotification	/usr/include/v8/v8.h	/^  static bool IdleNotification();$/;"	p	class:v8::V8	access:public	signature:()
v8::V8::IgnoreOutOfMemoryException	/usr/include/v8/v8.h	/^  static void IgnoreOutOfMemoryException();$/;"	p	class:v8::V8	access:public	signature:()
v8::V8::Initialize	/usr/include/v8/v8.h	/^  static bool Initialize();$/;"	p	class:v8::V8	access:public	signature:()
v8::V8::IsDead	/usr/include/v8/v8.h	/^  static bool IsDead();$/;"	p	class:v8::V8	access:public	signature:()
v8::V8::IsGlobalNearDeath	/usr/include/v8/v8.h	/^  static bool IsGlobalNearDeath(internal::Object** global_handle);$/;"	p	class:v8::V8	access:private	signature:(internal::Object** global_handle)
v8::V8::IsGlobalWeak	/usr/include/v8/v8.h	/^  static bool IsGlobalWeak(internal::Object** global_handle);$/;"	p	class:v8::V8	access:private	signature:(internal::Object** global_handle)
v8::V8::IsProfilerPaused	/usr/include/v8/v8.h	/^  static bool IsProfilerPaused();$/;"	p	class:v8::V8	access:public	signature:()
v8::V8::LowMemoryNotification	/usr/include/v8/v8.h	/^  static void LowMemoryNotification();$/;"	p	class:v8::V8	access:public	signature:()
v8::V8::MakeWeak	/usr/include/v8/v8.h	/^  static void MakeWeak(internal::Object** global_handle,$/;"	p	class:v8::V8	access:private	signature:(internal::Object** global_handle, void* data, WeakReferenceCallback)
v8::V8::PauseProfiler	/usr/include/v8/v8.h	/^  static void PauseProfiler();$/;"	p	class:v8::V8	access:public	signature:()
v8::V8::PauseProfilerEx	/usr/include/v8/v8.h	/^  static void PauseProfilerEx(int flags);$/;"	p	class:v8::V8	access:public	signature:(int flags)
v8::V8::RemoveMessageListeners	/usr/include/v8/v8.h	/^  static void RemoveMessageListeners(MessageCallback that);$/;"	p	class:v8::V8	access:public	signature:(MessageCallback that)
v8::V8::ResumeProfiler	/usr/include/v8/v8.h	/^  static void ResumeProfiler();$/;"	p	class:v8::V8	access:public	signature:()
v8::V8::ResumeProfilerEx	/usr/include/v8/v8.h	/^  static void ResumeProfilerEx(int flags);$/;"	p	class:v8::V8	access:public	signature:(int flags)
v8::V8::SetAddHistogramSampleFunction	/usr/include/v8/v8.h	/^  static void SetAddHistogramSampleFunction(AddHistogramSampleCallback);$/;"	p	class:v8::V8	access:public	signature:(AddHistogramSampleCallback)
v8::V8::SetCounterFunction	/usr/include/v8/v8.h	/^  static void SetCounterFunction(CounterLookupCallback);$/;"	p	class:v8::V8	access:public	signature:(CounterLookupCallback)
v8::V8::SetCreateHistogramFunction	/usr/include/v8/v8.h	/^  static void SetCreateHistogramFunction(CreateHistogramCallback);$/;"	p	class:v8::V8	access:public	signature:(CreateHistogramCallback)
v8::V8::SetFailedAccessCheckCallbackFunction	/usr/include/v8/v8.h	/^  static void SetFailedAccessCheckCallbackFunction(FailedAccessCheckCallback);$/;"	p	class:v8::V8	access:public	signature:(FailedAccessCheckCallback)
v8::V8::SetFatalErrorHandler	/usr/include/v8/v8.h	/^  static void SetFatalErrorHandler(FatalErrorCallback that);$/;"	p	class:v8::V8	access:public	signature:(FatalErrorCallback that)
v8::V8::SetFlagsFromCommandLine	/usr/include/v8/v8.h	/^  static void SetFlagsFromCommandLine(int* argc,$/;"	p	class:v8::V8	access:public	signature:(int* argc, char** argv, bool remove_flags)
v8::V8::SetFlagsFromString	/usr/include/v8/v8.h	/^  static void SetFlagsFromString(const char* str, int length);$/;"	p	class:v8::V8	access:public	signature:(const char* str, int length)
v8::V8::SetGlobalGCEpilogueCallback	/usr/include/v8/v8.h	/^  static void SetGlobalGCEpilogueCallback(GCCallback);$/;"	p	class:v8::V8	access:public	signature:(GCCallback)
v8::V8::SetGlobalGCPrologueCallback	/usr/include/v8/v8.h	/^  static void SetGlobalGCPrologueCallback(GCCallback);$/;"	p	class:v8::V8	access:public	signature:(GCCallback)
v8::V8::TerminateExecution	/usr/include/v8/v8.h	/^  static void TerminateExecution();$/;"	p	class:v8::V8	access:public	signature:()
v8::V8::TerminateExecution	/usr/include/v8/v8.h	/^  static void TerminateExecution(int thread_id);$/;"	p	class:v8::V8	access:public	signature:(int thread_id)
v8::V8::V8	/usr/include/v8/v8.h	/^  V8();$/;"	p	class:v8::V8	access:private	signature:()
v8::Value	/usr/include/v8/v8.h	/^class V8EXPORT Value : public Data {$/;"	c	namespace:v8	inherits:Data
v8::Value::BooleanValue	/usr/include/v8/v8.h	/^  bool BooleanValue() const;$/;"	p	class:v8::Value	access:public	signature:() const
v8::Value::Equals	/usr/include/v8/v8.h	/^  bool Equals(Handle<Value> that) const;$/;"	p	class:v8::Value	access:public	signature:(Handle<Value> that) const
v8::Value::FullIsString	/usr/include/v8/v8.h	/^  bool FullIsString() const;$/;"	p	class:v8::Value	access:private	signature:() const
v8::Value::Int32Value	/usr/include/v8/v8.h	/^  int32_t Int32Value() const;$/;"	p	class:v8::Value	access:public	signature:() const
v8::Value::IntegerValue	/usr/include/v8/v8.h	/^  int64_t IntegerValue() const;$/;"	p	class:v8::Value	access:public	signature:() const
v8::Value::IsArray	/usr/include/v8/v8.h	/^  bool IsArray() const;$/;"	p	class:v8::Value	access:public	signature:() const
v8::Value::IsBoolean	/usr/include/v8/v8.h	/^  bool IsBoolean() const;$/;"	p	class:v8::Value	access:public	signature:() const
v8::Value::IsDate	/usr/include/v8/v8.h	/^  bool IsDate() const;$/;"	p	class:v8::Value	access:public	signature:() const
v8::Value::IsExternal	/usr/include/v8/v8.h	/^  bool IsExternal() const;$/;"	p	class:v8::Value	access:public	signature:() const
v8::Value::IsFalse	/usr/include/v8/v8.h	/^  bool IsFalse() const;$/;"	p	class:v8::Value	access:public	signature:() const
v8::Value::IsFunction	/usr/include/v8/v8.h	/^  bool IsFunction() const;$/;"	p	class:v8::Value	access:public	signature:() const
v8::Value::IsInt32	/usr/include/v8/v8.h	/^  bool IsInt32() const;$/;"	p	class:v8::Value	access:public	signature:() const
v8::Value::IsNull	/usr/include/v8/v8.h	/^  bool IsNull() const;$/;"	p	class:v8::Value	access:public	signature:() const
v8::Value::IsNumber	/usr/include/v8/v8.h	/^  bool IsNumber() const;$/;"	p	class:v8::Value	access:public	signature:() const
v8::Value::IsObject	/usr/include/v8/v8.h	/^  bool IsObject() const;$/;"	p	class:v8::Value	access:public	signature:() const
v8::Value::IsString	/usr/include/v8/v8.h	/^  inline bool IsString() const;$/;"	p	class:v8::Value	access:public	signature:() const
v8::Value::IsString	/usr/include/v8/v8.h	/^bool Value::IsString() const {$/;"	f	class:v8::Value	signature:() const
v8::Value::IsTrue	/usr/include/v8/v8.h	/^  bool IsTrue() const;$/;"	p	class:v8::Value	access:public	signature:() const
v8::Value::IsUndefined	/usr/include/v8/v8.h	/^  bool IsUndefined() const;$/;"	p	class:v8::Value	access:public	signature:() const
v8::Value::NumberValue	/usr/include/v8/v8.h	/^  double NumberValue() const;$/;"	p	class:v8::Value	access:public	signature:() const
v8::Value::QuickIsString	/usr/include/v8/v8.h	/^  inline bool QuickIsString() const;$/;"	p	class:v8::Value	access:private	signature:() const
v8::Value::QuickIsString	/usr/include/v8/v8.h	/^bool Value::QuickIsString() const {$/;"	f	class:v8::Value	signature:() const
v8::Value::StrictEquals	/usr/include/v8/v8.h	/^  bool StrictEquals(Handle<Value> that) const;$/;"	p	class:v8::Value	access:public	signature:(Handle<Value> that) const
v8::Value::ToArrayIndex	/usr/include/v8/v8.h	/^  Local<Uint32> ToArrayIndex() const;$/;"	p	class:v8::Value	access:public	signature:() const
v8::Value::ToBoolean	/usr/include/v8/v8.h	/^  Local<Boolean> ToBoolean() const;$/;"	p	class:v8::Value	access:public	signature:() const
v8::Value::ToDetailString	/usr/include/v8/v8.h	/^  Local<String> ToDetailString() const;$/;"	p	class:v8::Value	access:public	signature:() const
v8::Value::ToInt32	/usr/include/v8/v8.h	/^  Local<Int32> ToInt32() const;$/;"	p	class:v8::Value	access:public	signature:() const
v8::Value::ToInteger	/usr/include/v8/v8.h	/^  Local<Integer> ToInteger() const;$/;"	p	class:v8::Value	access:public	signature:() const
v8::Value::ToNumber	/usr/include/v8/v8.h	/^  Local<Number> ToNumber() const;$/;"	p	class:v8::Value	access:public	signature:() const
v8::Value::ToObject	/usr/include/v8/v8.h	/^  Local<Object> ToObject() const;$/;"	p	class:v8::Value	access:public	signature:() const
v8::Value::ToString	/usr/include/v8/v8.h	/^  Local<String> ToString() const;$/;"	p	class:v8::Value	access:public	signature:() const
v8::Value::ToUint32	/usr/include/v8/v8.h	/^  Local<Uint32> ToUint32() const;$/;"	p	class:v8::Value	access:public	signature:() const
v8::Value::Uint32Value	/usr/include/v8/v8.h	/^  uint32_t Uint32Value() const;$/;"	p	class:v8::Value	access:public	signature:() const
v8::WeakReferenceCallback	/usr/include/v8/v8.h	/^typedef void (*WeakReferenceCallback)(Persistent<Value> object,$/;"	t	namespace:v8
v8::internal	/usr/include/v8/v8.h	/^namespace internal {$/;"	n	namespace:v8
v8::internal::InternalConstants	/usr/include/v8/v8.h	/^template <> struct InternalConstants<4> {$/;"	s	namespace:v8::internal
v8::internal::InternalConstants	/usr/include/v8/v8.h	/^template <> struct InternalConstants<8> {$/;"	s	namespace:v8::internal
v8::internal::InternalConstants::kStringResourceOffset	/usr/include/v8/v8.h	/^  static const int kStringResourceOffset = 2 * sizeof(void*);$/;"	m	struct:v8::internal::InternalConstants	access:public
v8::internal::InternalConstants::kStringResourceOffset	/usr/include/v8/v8.h	/^  static const int kStringResourceOffset = 3 * sizeof(void*);$/;"	m	struct:v8::internal::InternalConstants	access:public
v8::internal::Internals	/usr/include/v8/v8.h	/^class Internals {$/;"	c	namespace:v8::internal
v8::internal::Internals::GetExternalPointer	/usr/include/v8/v8.h	/^  static inline void* GetExternalPointer(internal::Object* obj) {$/;"	f	class:v8::internal::Internals	access:public	signature:(internal::Object* obj)
v8::internal::Internals::GetInstanceType	/usr/include/v8/v8.h	/^  static inline int GetInstanceType(internal::Object* obj) {$/;"	f	class:v8::internal::Internals	access:public	signature:(internal::Object* obj)
v8::internal::Internals::HasHeapObjectTag	/usr/include/v8/v8.h	/^  static inline bool HasHeapObjectTag(internal::Object* value) {$/;"	f	class:v8::internal::Internals	access:public	signature:(internal::Object* value)
v8::internal::Internals::HasSmiTag	/usr/include/v8/v8.h	/^  static inline bool HasSmiTag(internal::Object* value) {$/;"	f	class:v8::internal::Internals	access:public	signature:(internal::Object* value)
v8::internal::Internals::IsExternalTwoByteString	/usr/include/v8/v8.h	/^  static inline bool IsExternalTwoByteString(int instance_type) {$/;"	f	class:v8::internal::Internals	access:public	signature:(int instance_type)
v8::internal::Internals::ReadField	/usr/include/v8/v8.h	/^  static inline T ReadField(Object* ptr, int offset) {$/;"	f	class:v8::internal::Internals	access:public	signature:(Object* ptr, int offset)
v8::internal::Internals::SmiValue	/usr/include/v8/v8.h	/^  static inline int SmiValue(internal::Object* value) {$/;"	f	class:v8::internal::Internals	access:public	signature:(internal::Object* value)
v8::internal::Internals::kExternalTwoByteRepresentationTag	/usr/include/v8/v8.h	/^  static const int kExternalTwoByteRepresentationTag = 0x03;$/;"	m	class:v8::internal::Internals	access:public
v8::internal::Internals::kFirstNonstringType	/usr/include/v8/v8.h	/^  V8EXPORT static int kFirstNonstringType;$/;"	m	class:v8::internal::Internals	access:public
v8::internal::Internals::kFullStringRepresentationMask	/usr/include/v8/v8.h	/^  static const int kFullStringRepresentationMask = 0x07;$/;"	m	class:v8::internal::Internals	access:public
v8::internal::Internals::kHeapObjectMapOffset	/usr/include/v8/v8.h	/^  static const int kHeapObjectMapOffset = 0;$/;"	m	class:v8::internal::Internals	access:public
v8::internal::Internals::kJSObjectHeaderSize	/usr/include/v8/v8.h	/^  static const int kJSObjectHeaderSize = 3 * sizeof(void*);$/;"	m	class:v8::internal::Internals	access:public
v8::internal::Internals::kJSObjectType	/usr/include/v8/v8.h	/^  V8EXPORT static int kJSObjectType;$/;"	m	class:v8::internal::Internals	access:public
v8::internal::Internals::kMapInstanceTypeOffset	/usr/include/v8/v8.h	/^  static const int kMapInstanceTypeOffset = sizeof(void*) + sizeof(int);$/;"	m	class:v8::internal::Internals	access:public
v8::internal::Internals::kProxyProxyOffset	/usr/include/v8/v8.h	/^  static const int kProxyProxyOffset = sizeof(void*);$/;"	m	class:v8::internal::Internals	access:public
v8::internal::Internals::kProxyType	/usr/include/v8/v8.h	/^  V8EXPORT static int kProxyType;$/;"	m	class:v8::internal::Internals	access:public
v8::internal::Internals::kStringResourceOffset	/usr/include/v8/v8.h	/^  static const int kStringResourceOffset =$/;"	m	class:v8::internal::Internals	access:public
v8::internal::SmiConstants	/usr/include/v8/v8.h	/^template <> struct SmiConstants<4> {$/;"	s	namespace:v8::internal
v8::internal::SmiConstants	/usr/include/v8/v8.h	/^template <> struct SmiConstants<8> {$/;"	s	namespace:v8::internal
v8::internal::SmiConstants::SmiToInt	/usr/include/v8/v8.h	/^  static inline int SmiToInt(internal::Object* value) {$/;"	f	struct:v8::internal::SmiConstants	access:public	signature:(internal::Object* value)
v8::internal::SmiConstants::kSmiShiftSize	/usr/include/v8/v8.h	/^  static const int kSmiShiftSize = 0;$/;"	m	struct:v8::internal::SmiConstants	access:public
v8::internal::SmiConstants::kSmiShiftSize	/usr/include/v8/v8.h	/^  static const int kSmiShiftSize = 31;$/;"	m	struct:v8::internal::SmiConstants	access:public
v8::internal::SmiConstants::kSmiValueSize	/usr/include/v8/v8.h	/^  static const int kSmiValueSize = 31;$/;"	m	struct:v8::internal::SmiConstants	access:public
v8::internal::SmiConstants::kSmiValueSize	/usr/include/v8/v8.h	/^  static const int kSmiValueSize = 32;$/;"	m	struct:v8::internal::SmiConstants	access:public
v8::internal::kHeapObjectTag	/usr/include/v8/v8.h	/^const int kHeapObjectTag = 1;$/;"	m	namespace:v8::internal
v8::internal::kHeapObjectTagMask	/usr/include/v8/v8.h	/^const intptr_t kHeapObjectTagMask = (1 << kHeapObjectTagSize) - 1;$/;"	m	namespace:v8::internal
v8::internal::kHeapObjectTagSize	/usr/include/v8/v8.h	/^const int kHeapObjectTagSize = 2;$/;"	m	namespace:v8::internal
v8::internal::kSmiShiftSize	/usr/include/v8/v8.h	/^const int kSmiShiftSize = SmiConstants<sizeof(void*)>::kSmiShiftSize;$/;"	m	namespace:v8::internal
v8::internal::kSmiTag	/usr/include/v8/v8.h	/^const int kSmiTag = 0;$/;"	m	namespace:v8::internal
v8::internal::kSmiTagMask	/usr/include/v8/v8.h	/^const intptr_t kSmiTagMask = (1 << kSmiTagSize) - 1;$/;"	m	namespace:v8::internal
v8::internal::kSmiTagSize	/usr/include/v8/v8.h	/^const int kSmiTagSize = 1;$/;"	m	namespace:v8::internal
v8::internal::kSmiValueSize	/usr/include/v8/v8.h	/^const int kSmiValueSize = SmiConstants<sizeof(void*)>::kSmiValueSize;$/;"	m	namespace:v8::internal
v8::kExternalByteArray	/usr/include/v8/v8.h	/^  kExternalByteArray = 1,$/;"	e	enum:v8::ExternalArrayType
v8::kExternalFloatArray	/usr/include/v8/v8.h	/^  kExternalFloatArray$/;"	e	enum:v8::ExternalArrayType
v8::kExternalIntArray	/usr/include/v8/v8.h	/^  kExternalIntArray,$/;"	e	enum:v8::ExternalArrayType
v8::kExternalShortArray	/usr/include/v8/v8.h	/^  kExternalShortArray,$/;"	e	enum:v8::ExternalArrayType
v8::kExternalUnsignedByteArray	/usr/include/v8/v8.h	/^  kExternalUnsignedByteArray,$/;"	e	enum:v8::ExternalArrayType
v8::kExternalUnsignedIntArray	/usr/include/v8/v8.h	/^  kExternalUnsignedIntArray,$/;"	e	enum:v8::ExternalArrayType
v8::kExternalUnsignedShortArray	/usr/include/v8/v8.h	/^  kExternalUnsignedShortArray,$/;"	e	enum:v8::ExternalArrayType
val_	/usr/include/v8/v8.h	/^  T* val_;$/;"	m	class:v8::Handle	access:private
values_	/usr/include/v8/v8.h	/^  void** values_;$/;"	m	class:v8::Arguments	access:private
~AsciiValue	/usr/include/v8/v8.h	/^    ~AsciiValue();$/;"	p	class:v8::String::AsciiValue	access:public	signature:()
~ClientData	/usr/include/v8/v8-debug.h	/^    virtual ~ClientData() {}$/;"	f	class:v8::Debug::ClientData	access:public	signature:()
~Extension	/usr/include/v8/v8.h	/^  virtual ~Extension() { }$/;"	f	class:v8::Extension	access:public	signature:()
~ExternalAsciiStringResource	/usr/include/v8/v8.h	/^    virtual ~ExternalAsciiStringResource() {}$/;"	f	class:v8::String::ExternalAsciiStringResource	access:public	signature:()
~ExternalStringResource	/usr/include/v8/v8.h	/^    virtual ~ExternalStringResource() {}$/;"	f	class:v8::String::ExternalStringResource	access:public	signature:()
~ExternalStringResourceBase	/usr/include/v8/v8.h	/^    virtual ~ExternalStringResourceBase() {}$/;"	f	class:v8::String::ExternalStringResourceBase	access:public	signature:()
~HandleScope	/usr/include/v8/v8.h	/^  ~HandleScope();$/;"	p	class:v8::HandleScope	access:public	signature:()
~Locker	/usr/include/v8/v8.h	/^  ~Locker();$/;"	p	class:v8::Locker	access:public	signature:()
~Message	/usr/include/v8/v8-debug.h	/^    virtual ~Message() {}$/;"	f	class:v8::Debug::Message	access:public	signature:()
~Scope	/usr/include/v8/v8.h	/^    inline ~Scope() { context_->Exit(); }$/;"	f	class:v8::Context::Scope	access:public	signature:()
~ScriptData	/usr/include/v8/v8.h	/^  virtual ~ScriptData() { }$/;"	f	class:v8::ScriptData	access:public	signature:()
~TryCatch	/usr/include/v8/v8.h	/^  ~TryCatch();$/;"	p	class:v8::TryCatch	access:public	signature:()
~Unlocker	/usr/include/v8/v8.h	/^  ~Unlocker();$/;"	p	class:v8::Unlocker	access:public	signature:()
~Utf8Value	/usr/include/v8/v8.h	/^    ~Utf8Value();$/;"	p	class:v8::String::Utf8Value	access:public	signature:()
~Value	/usr/include/v8/v8.h	/^    ~Value();$/;"	p	class:v8::String::Value	access:public	signature:()
